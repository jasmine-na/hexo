{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-sausage/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/hexo-theme-sausage/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-sausage/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-sausage/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-sausage/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-sausage/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-sausage/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-sausage/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-sausage/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-sausage/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-sausage/source/js/base.js","path":"js/base.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-sausage/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-sausage/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-sausage/source/js/jquery.lazyload.min.js","path":"js/jquery.lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-sausage/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-sausage/source/js/jquery-1.9.1.min.js","path":"js/jquery-1.9.1.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-sausage/README.md","hash":"bba367e680cd5ee90b5529204fd7c0b27201e7c9","modified":1477616911418},{"_id":"themes/hexo-theme-sausage/.gitignore","hash":"9d4617854e8c1f131b162e9e04aa47bcd90e9a7b","modified":1477616911402},{"_id":"themes/hexo-theme-sausage/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1477616911496},{"_id":"themes/hexo-theme-sausage/_config.yml","hash":"979b9ea282150bd94c7be03f8b7816a4ba1eb38a","modified":1477616911418},{"_id":"source/_posts/Express 应用生成器express-generator.md","hash":"213dfcefcca7806bee134b4e2291b0c74077ccfb","modified":1477551426589},{"_id":"source/_posts/MongoDB安装、启动与关闭.md","hash":"00aedabb6c146906e641cd313001c22a8c568217","modified":1477551173152},{"_id":"source/_posts/git手册.md","hash":"15fdd33dbd2c83aade048edb1dce6bf24f13aa1f","modified":1477551413493},{"_id":"source/_posts/grunt livereload nodemon grunt集成自动重启（实例）.md","hash":"507619ea6835c7771c8013d43ffe1c01ffd8ea93","modified":1477551402089},{"_id":"source/_posts/hexo d后 ERROR Deployer not found- git.md","hash":"2ccfc775a2984b3599156a6d6367a89930a2f23f","modified":1477551552904},{"_id":"source/_posts/hexo+github（windows版+http版），搭建Hexo博客并部署到Github.md","hash":"f570cfe7bcc4af4b1c3dcd39959f1ccb96368733","modified":1477548530672},{"_id":"source/_posts/hexo+github（windows版+ssh版），搭建Hexo博客并部署到Github.md","hash":"30db1881972bd05e555a0086982a9c9f8192121d","modified":1477551162186},{"_id":"source/_posts/mac下git需忽略的文件处理办法（mac）.md","hash":"caa4f95c10f61e0a238b56b54a4384203f0e2a81","modified":1477551167861},{"_id":"source/_posts/npm执行命令后无任何响应（windows下）.md","hash":"99188dbc2d4aad18ca8af7b207e86a0e798f60eb","modified":1477551309027},{"_id":"source/_posts/osx系统git下载地址.md","hash":"cd35d556a1cce7eafb396b7962a8c2ed7054dcb9","modified":1477551288219},{"_id":"source/_posts/ssh是否连接成功.md","hash":"22be9b18615aa39fe1cca30820e828758a0aa024","modified":1477551271000},{"_id":"source/_posts/win系统下nodejs安装及环境配置.md","hash":"ddbc7461042cbbd6e052018025a13b3c0f939321","modified":1477551240808},{"_id":"source/_posts/web开发时自动刷新网页：liveReload安装，sublime 3.md","hash":"d9090870bdba9d7156d2e77389f6fda2cdedbcce","modified":1477551258262},{"_id":"source/_posts/问题2：有关使用 Hexo 和 GitHub 搭建博客，出现 hexo -d 报错如何解决？（windows下）.md","hash":"3c456c1eda77f3d053ae74a685975c9189dd991c","modified":1477551438125},{"_id":"source/_posts/问题1：有关使用 Hexo 和 GitHub 搭建博客，出现 hexo -d 报错如何解决？（windows下）.md","hash":"4af6bdbf874fd0e996ad8503e6d98d3c4d8399f9","modified":1477551448314},{"_id":"themes/hexo-theme-sausage/.git/FETCH_HEAD","hash":"5b90423ff6cfb7f404ff02e6c1ac9d8d58ce0b90","modified":1477617041708},{"_id":"source/_posts/如何在Mac OS X中开启或关闭显示隐藏文件命令.md","hash":"411ebfa184311d4191e81760909832e684beb97d","modified":1477550476453},{"_id":"themes/hexo-theme-sausage/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1477616911277},{"_id":"themes/hexo-theme-sausage/.git/config","hash":"296456cbac2ce45c2d967e7f22fdea9fc842f38a","modified":1477616911309},{"_id":"themes/hexo-theme-sausage/.git/index","hash":"d084616ea1ef123cad4b9fb6047be6ba002df1ad","modified":1477616911605},{"_id":"themes/hexo-theme-sausage/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1477616902431},{"_id":"themes/hexo-theme-sausage/.git/ORIG_HEAD","hash":"cb36538a4bf932b8fc2328dbec1c22adeebffe60","modified":1477617042706},{"_id":"themes/hexo-theme-sausage/.git/packed-refs","hash":"7f92129bc85a965a57a37ec1da3b768e807e6f3f","modified":1477616911262},{"_id":"themes/hexo-theme-sausage/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1477616911496},{"_id":"themes/hexo-theme-sausage/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1477616911496},{"_id":"themes/hexo-theme-sausage/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1477616911496},{"_id":"themes/hexo-theme-sausage/layout/layout.ejs","hash":"2b3f3af0fe56746a0b76651272bc9f042aa3b91a","modified":1477616911496},{"_id":"themes/hexo-theme-sausage/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1477616911496},{"_id":"themes/hexo-theme-sausage/layout/post.ejs","hash":"a05fd1a27e1c54c9dbab9e69a257a299b0f549cc","modified":1477616911496},{"_id":"themes/hexo-theme-sausage/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1477616911496},{"_id":"themes/hexo-theme-sausage/source/404.html","hash":"b8c91f6362f9f68157544b94d9e862f9e37a5e2f","modified":1477616911496},{"_id":"themes/hexo-theme-sausage/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1477616902447},{"_id":"themes/hexo-theme-sausage/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1477616902493},{"_id":"themes/hexo-theme-sausage/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1477616902493},{"_id":"themes/hexo-theme-sausage/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1477616902493},{"_id":"themes/hexo-theme-sausage/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1477616902524},{"_id":"themes/hexo-theme-sausage/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1477616902540},{"_id":"themes/hexo-theme-sausage/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1477616902571},{"_id":"themes/hexo-theme-sausage/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1477616902602},{"_id":"themes/hexo-theme-sausage/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1477616902618},{"_id":"themes/hexo-theme-sausage/.git/logs/HEAD","hash":"de8819921489c9177c21eeaecf6793bc6091444e","modified":1477616911293},{"_id":"themes/hexo-theme-sausage/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1477616902634},{"_id":"themes/hexo-theme-sausage/layout/_partial/after-footer.ejs","hash":"08971c566079718d0f0c3617cc25a346f6a35f7a","modified":1477616911449},{"_id":"themes/hexo-theme-sausage/layout/_partial/archive-post.ejs","hash":"d0e017c97456f2dbfcb1dafb3f20ce06f68fe05e","modified":1477616911449},{"_id":"themes/hexo-theme-sausage/layout/_partial/archive.ejs","hash":"1a6624ed95091d5e9d771e6b00b1b7b2d52ec631","modified":1477616911449},{"_id":"themes/hexo-theme-sausage/layout/_partial/article.ejs","hash":"405fc2ea4e5662eef8ba59feb0b72e12654c47f6","modified":1477616911449},{"_id":"themes/hexo-theme-sausage/layout/_partial/footer.ejs","hash":"22405a53bcd6e62480a16d64618ce91522535e14","modified":1477616911449},{"_id":"themes/hexo-theme-sausage/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1477616911464},{"_id":"themes/hexo-theme-sausage/layout/_partial/head.ejs","hash":"0780576f99d3201ab980a21abccc82a67db27118","modified":1477616911464},{"_id":"themes/hexo-theme-sausage/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1477616911464},{"_id":"themes/hexo-theme-sausage/layout/_partial/left-col.ejs","hash":"f6f179bcfb9a1abb3feb8c0a7c5e9e18f29cebd9","modified":1477616911464},{"_id":"themes/hexo-theme-sausage/layout/_partial/mobile-nav.ejs","hash":"ae6e6f2c864d55388ec1ea807f95804f1db41418","modified":1477616911464},{"_id":"themes/hexo-theme-sausage/layout/_partial/mathjax.ejs","hash":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1477616911464},{"_id":"themes/hexo-theme-sausage/layout/_partial/page-tags.ejs","hash":"120eceee11347c5b3584abb2639354a479822b72","modified":1477616911464},{"_id":"themes/hexo-theme-sausage/source/css/_variables.styl","hash":"d2a1e7caec4414237f5f97a29fe9de65138bfa68","modified":1477616911558},{"_id":"themes/hexo-theme-sausage/source/css/style.styl","hash":"2e4500491db9e88ca8fe4ce21a6ad2940608eb50","modified":1477616911558},{"_id":"themes/hexo-theme-sausage/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1477616911574},{"_id":"themes/hexo-theme-sausage/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1477616911574},{"_id":"themes/hexo-theme-sausage/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1477616911574},{"_id":"themes/hexo-theme-sausage/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1477616911574},{"_id":"themes/hexo-theme-sausage/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1477616911574},{"_id":"themes/hexo-theme-sausage/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1477616911574},{"_id":"themes/hexo-theme-sausage/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1477616911574},{"_id":"themes/hexo-theme-sausage/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1477616911574},{"_id":"themes/hexo-theme-sausage/source/js/base.js","hash":"c4826745a0346415b064aed515a025b508adabd3","modified":1477616911574},{"_id":"themes/hexo-theme-sausage/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1477616911511},{"_id":"themes/hexo-theme-sausage/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1477616911574},{"_id":"themes/hexo-theme-sausage/source/js/mobile.js","hash":"c64aa048a54252dd5f4cf01a48f09311e2f74711","modified":1477616911589},{"_id":"themes/hexo-theme-sausage/source/js/jquery.lazyload.min.js","hash":"56b4c94cff0d5fdfca579eac85da28a767607644","modified":1477616911589},{"_id":"themes/hexo-theme-sausage/source/js/pc.js","hash":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1477616911605},{"_id":"themes/hexo-theme-sausage/.git/objects/pack/pack-96dfce9b3745f29ff841f9c27fe96e88eff05120.idx","hash":"b1a10d28bc7078513221302ec10bdaadd0de29c0","modified":1477616910700},{"_id":"themes/hexo-theme-sausage/layout/_partial/post/copyright.ejs","hash":"eea9fe3b867a54d2688844f2ca435f69d9a56da9","modified":1477616911480},{"_id":"themes/hexo-theme-sausage/layout/_partial/post/category.ejs","hash":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1477616911480},{"_id":"themes/hexo-theme-sausage/layout/_partial/post/duoshuo.ejs","hash":"8ca9332e855d9f43660a7735e91c44df776e1144","modified":1477616911480},{"_id":"themes/hexo-theme-sausage/layout/_partial/post/date.ejs","hash":"091b26d66413aead6b9678eda73d18cc7cb347fc","modified":1477616911480},{"_id":"themes/hexo-theme-sausage/layout/_partial/post/nav.ejs","hash":"6a3b7ac3285ac757677a6559ac48e65226aa6611","modified":1477616911480},{"_id":"themes/hexo-theme-sausage/layout/_partial/post/tag.ejs","hash":"fd0ecf27d0c8eac60cc3b8cc6da21dd67ba7b450","modified":1477616911480},{"_id":"themes/hexo-theme-sausage/layout/_partial/post/share.ejs","hash":"d537519ab37f52de5d355d81db2e8f24d515da93","modified":1477616911480},{"_id":"themes/hexo-theme-sausage/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1477616911480},{"_id":"themes/hexo-theme-sausage/source/js/jquery-1.9.1.min.js","hash":"7c51ab8c7a21ac07d5038f14dd7982a33c570c25","modified":1477616911589},{"_id":"themes/hexo-theme-sausage/.git/refs/heads/master","hash":"cb36538a4bf932b8fc2328dbec1c22adeebffe60","modified":1477616911277},{"_id":"themes/hexo-theme-sausage/source/css/_partial/archive.styl","hash":"202ea2520590269629ecac44429f8559ba23612c","modified":1477616911511},{"_id":"themes/hexo-theme-sausage/source/css/_partial/article.styl","hash":"93bd8548d18ecdb5d899d01c4e30f47f2b6aca46","modified":1477616911511},{"_id":"themes/hexo-theme-sausage/source/css/_partial/footer.styl","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1477616911511},{"_id":"themes/hexo-theme-sausage/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1477616911511},{"_id":"themes/hexo-theme-sausage/source/css/_partial/highlight.styl","hash":"98c7dc3e688dbd9d4b26429671af1f5037282d22","modified":1477616911511},{"_id":"themes/hexo-theme-sausage/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1477616911527},{"_id":"themes/hexo-theme-sausage/source/css/_partial/main.styl","hash":"7a2e5c79e358a66550e7e2a0165ea4898222c208","modified":1477616911527},{"_id":"themes/hexo-theme-sausage/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1477616911527},{"_id":"themes/hexo-theme-sausage/source/css/_partial/page.styl","hash":"c80003abad9f0315591e2e6be3542e926b606f71","modified":1477616911527},{"_id":"themes/hexo-theme-sausage/source/css/_partial/share.styl","hash":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1477616911542},{"_id":"themes/hexo-theme-sausage/source/css/_partial/mobile.styl","hash":"5b093e9026231cd3954785f0772372bde846c861","modified":1477616911527},{"_id":"themes/hexo-theme-sausage/source/css/_partial/scroll.styl","hash":"59f1310facea729213dc8d0084bf58b1310f6b59","modified":1477616911527},{"_id":"themes/hexo-theme-sausage/source/css/_util/block-select.styl","hash":"311ac811c35eefc63db4ed018385832f0654731b","modified":1477616911558},{"_id":"themes/hexo-theme-sausage/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1477616911558},{"_id":"themes/hexo-theme-sausage/source/css/_partial/tagcloud.styl","hash":"861d6fb0728a07421768adda24c1ea189e19fd35","modified":1477616911558},{"_id":"themes/hexo-theme-sausage/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1477616911558},{"_id":"themes/hexo-theme-sausage/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1477616911558},{"_id":"themes/hexo-theme-sausage/.git/objects/pack/pack-96dfce9b3745f29ff841f9c27fe96e88eff05120.pack","hash":"6191ebb5e30a279cf6e94dd8dad0c2b9d29a7fc7","modified":1477616910747},{"_id":"themes/hexo-theme-sausage/.git/logs/refs/heads/master","hash":"de8819921489c9177c21eeaecf6793bc6091444e","modified":1477616911293},{"_id":"themes/hexo-theme-sausage/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1477616911277},{"_id":"themes/hexo-theme-sausage/.git/logs/refs/remotes/origin/HEAD","hash":"de8819921489c9177c21eeaecf6793bc6091444e","modified":1477616911277}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Express 应用生成器express-generator","date":"2016-10-27T05:54:18.000Z","_content":"Express 应用生成器\n\n通过应用生成器工具 express 可以快速创建一个应用的骨架。\n\n通过如下命令安装：\n\n```\n$ npm install express-generator -g\n```\n\n-h 选项可以列出所有可用的命令行选项：\n\n```\n$ express -h\n\n  Usage: express [options] [dir]\n\n  Options:\n\n    -h, --help          output usage information\n    -V, --version       output the version number\n    -e, --ejs           add ejs engine support (defaults to jade)\n        --hbs           add handlebars engine support\n    -H, --hogan         add hogan.js engine support\n    -c, --css <engine>  add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css)\n        --git           add .gitignore\n    -f, --force         force on non-empty directory\n```\n\n例如，下面的示例就是在当前工作目录下创建一个命名为 myapp 的应用。\n\n```\n$ express myapp\n\n   create : myapp\n   create : myapp/package.json\n   create : myapp/app.js\n   create : myapp/public\n   create : myapp/public/javascripts\n   create : myapp/public/images\n   create : myapp/routes\n   create : myapp/routes/index.js\n   create : myapp/routes/users.js\n   create : myapp/public/stylesheets\n   create : myapp/public/stylesheets/style.css\n   create : myapp/views\n   create : myapp/views/index.jade\n   create : myapp/views/layout.jade\n   create : myapp/views/error.jade\n   create : myapp/bin\n   create : myapp/bin/www\n```\n\n然后安装所有依赖包：\n\n```\n$ cd myapp \n$ npm install\n```\n\n启动这个应用（MacOS 或 Linux 平台）：\n\n```\n$ DEBUG=myapp npm start\n```\n\n\n\nWindows 平台使用如下命令：\n\n```\n> set DEBUG=myapp & npm start\n```\n\n然后在浏览器中打开 http://localhost:3000/ 网址就可以看到这个应用了。i\n\n通过 Express 应用生成器创建的应用一般都有如下目录结构：\n\n```\n.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.jade\n    ├── index.jade\n    └── layout.jade\n```\n\n7 directories, 9 files","source":"_posts/Express 应用生成器express-generator.md","raw":"---\ntitle: Express 应用生成器express-generator\ndate: 2016-10-27 13:54:18\ntags:\n---\nExpress 应用生成器\n\n通过应用生成器工具 express 可以快速创建一个应用的骨架。\n\n通过如下命令安装：\n\n```\n$ npm install express-generator -g\n```\n\n-h 选项可以列出所有可用的命令行选项：\n\n```\n$ express -h\n\n  Usage: express [options] [dir]\n\n  Options:\n\n    -h, --help          output usage information\n    -V, --version       output the version number\n    -e, --ejs           add ejs engine support (defaults to jade)\n        --hbs           add handlebars engine support\n    -H, --hogan         add hogan.js engine support\n    -c, --css <engine>  add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css)\n        --git           add .gitignore\n    -f, --force         force on non-empty directory\n```\n\n例如，下面的示例就是在当前工作目录下创建一个命名为 myapp 的应用。\n\n```\n$ express myapp\n\n   create : myapp\n   create : myapp/package.json\n   create : myapp/app.js\n   create : myapp/public\n   create : myapp/public/javascripts\n   create : myapp/public/images\n   create : myapp/routes\n   create : myapp/routes/index.js\n   create : myapp/routes/users.js\n   create : myapp/public/stylesheets\n   create : myapp/public/stylesheets/style.css\n   create : myapp/views\n   create : myapp/views/index.jade\n   create : myapp/views/layout.jade\n   create : myapp/views/error.jade\n   create : myapp/bin\n   create : myapp/bin/www\n```\n\n然后安装所有依赖包：\n\n```\n$ cd myapp \n$ npm install\n```\n\n启动这个应用（MacOS 或 Linux 平台）：\n\n```\n$ DEBUG=myapp npm start\n```\n\n\n\nWindows 平台使用如下命令：\n\n```\n> set DEBUG=myapp & npm start\n```\n\n然后在浏览器中打开 http://localhost:3000/ 网址就可以看到这个应用了。i\n\n通过 Express 应用生成器创建的应用一般都有如下目录结构：\n\n```\n.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.jade\n    ├── index.jade\n    └── layout.jade\n```\n\n7 directories, 9 files","slug":"Express 应用生成器express-generator","published":1,"updated":"2016-10-27T06:57:06.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciut34bt30000b8g2nh5ylvu3","content":"<p>Express 应用生成器</p>\n<p>通过应用生成器工具 express 可以快速创建一个应用的骨架。</p>\n<p>通过如下命令安装：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm <span class=\"keyword\">install</span> express-generator -g</div></pre></td></tr></table></figure>\n<p>-h 选项可以列出所有可用的命令行选项：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ express -h</div><div class=\"line\"></div><div class=\"line\">  Usage: express [<span class=\"keyword\">options</span>] [dir]</div><div class=\"line\"></div><div class=\"line\">  Option<span class=\"variable\">s:</span></div><div class=\"line\"></div><div class=\"line\">    -h, --<span class=\"keyword\">help</span>          output usage information</div><div class=\"line\">    -V, --<span class=\"keyword\">version</span>       output the <span class=\"keyword\">version</span> <span class=\"keyword\">number</span></div><div class=\"line\">    -<span class=\"keyword\">e</span>, --ejs           <span class=\"built_in\">add</span> ejs engine support (defaults <span class=\"keyword\">to</span> jade)</div><div class=\"line\">        --hbs           <span class=\"built_in\">add</span> handlebars engine support</div><div class=\"line\">    -H, --hogan         <span class=\"built_in\">add</span> hogan.js engine support</div><div class=\"line\">    -<span class=\"keyword\">c</span>, --css <span class=\"symbol\">&lt;engine&gt;</span>  <span class=\"built_in\">add</span> stylesheet <span class=\"symbol\">&lt;engine&gt;</span> support (less|stylus|compass|sass) (defaults <span class=\"keyword\">to</span> plain css)</div><div class=\"line\">        --git           <span class=\"built_in\">add</span> .gitignore</div><div class=\"line\">    -<span class=\"keyword\">f</span>, --force         force <span class=\"keyword\">on</span> non-<span class=\"built_in\">empty</span> directory</div></pre></td></tr></table></figure>\n<p>例如，下面的示例就是在当前工作目录下创建一个命名为 myapp 的应用。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ express myapp</div><div class=\"line\"></div><div class=\"line\">   <span class=\"string\">create :</span> myapp</div><div class=\"line\">   <span class=\"string\">create :</span> myapp/<span class=\"keyword\">package</span>.json</div><div class=\"line\">   <span class=\"string\">create :</span> myapp/app.js</div><div class=\"line\">   <span class=\"string\">create :</span> myapp/<span class=\"keyword\">public</span></div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/public/</span>javascripts</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/public/</span>images</div><div class=\"line\">   <span class=\"string\">create :</span> myapp/routes</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/routes/</span>index.js</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/routes/</span>users.js</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/public/</span>stylesheets</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/public/</span>stylesheets/style.css</div><div class=\"line\">   <span class=\"string\">create :</span> myapp/views</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/views/</span>index.jade</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/views/</span>layout.jade</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/views/</span>error.jade</div><div class=\"line\">   <span class=\"string\">create :</span> myapp/bin</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/bin/</span>www</div></pre></td></tr></table></figure>\n<p>然后安装所有依赖包：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>cd myapp </div><div class=\"line\"><span class=\"variable\">$ </span>npm install</div></pre></td></tr></table></figure>\n<p>启动这个应用（MacOS 或 Linux 平台）：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ DEBUG=myapp <span class=\"built_in\">npm</span> start</div></pre></td></tr></table></figure>\n<p>Windows 平台使用如下命令：</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"built_in\">set</span> DEBUG=myapp &amp; npm <span class=\"built_in\">start</span></div></pre></td></tr></table></figure>\n<p>然后在浏览器中打开 <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"external\">http://localhost:3000/</a> 网址就可以看到这个应用了。i</p>\n<p>通过 Express 应用生成器创建的应用一般都有如下目录结构：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── app<span class=\"selector-class\">.js</span></div><div class=\"line\">├── bin</div><div class=\"line\">│   └── www</div><div class=\"line\">├── package<span class=\"selector-class\">.json</span></div><div class=\"line\">├── public</div><div class=\"line\">│   ├── images</div><div class=\"line\">│   ├── javascripts</div><div class=\"line\">│   └── stylesheets</div><div class=\"line\">│       └── style<span class=\"selector-class\">.css</span></div><div class=\"line\">├── routes</div><div class=\"line\">│   ├── index<span class=\"selector-class\">.js</span></div><div class=\"line\">│   └── users<span class=\"selector-class\">.js</span></div><div class=\"line\">└── views</div><div class=\"line\">    ├── error<span class=\"selector-class\">.jade</span></div><div class=\"line\">    ├── index<span class=\"selector-class\">.jade</span></div><div class=\"line\">    └── layout.jade</div></pre></td></tr></table></figure>\n<p>7 directories, 9 files</p>\n","excerpt":"","more":"<p>Express 应用生成器</p>\n<p>通过应用生成器工具 express 可以快速创建一个应用的骨架。</p>\n<p>通过如下命令安装：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm <span class=\"keyword\">install</span> express-generator -g</div></pre></td></tr></table></figure>\n<p>-h 选项可以列出所有可用的命令行选项：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ express -h</div><div class=\"line\"></div><div class=\"line\">  Usage: express [<span class=\"keyword\">options</span>] [dir]</div><div class=\"line\"></div><div class=\"line\">  Option<span class=\"variable\">s:</span></div><div class=\"line\"></div><div class=\"line\">    -h, --<span class=\"keyword\">help</span>          output usage information</div><div class=\"line\">    -V, --<span class=\"keyword\">version</span>       output the <span class=\"keyword\">version</span> <span class=\"keyword\">number</span></div><div class=\"line\">    -<span class=\"keyword\">e</span>, --ejs           <span class=\"built_in\">add</span> ejs engine support (defaults <span class=\"keyword\">to</span> jade)</div><div class=\"line\">        --hbs           <span class=\"built_in\">add</span> handlebars engine support</div><div class=\"line\">    -H, --hogan         <span class=\"built_in\">add</span> hogan.js engine support</div><div class=\"line\">    -<span class=\"keyword\">c</span>, --css <span class=\"symbol\">&lt;engine&gt;</span>  <span class=\"built_in\">add</span> stylesheet <span class=\"symbol\">&lt;engine&gt;</span> support (less|stylus|compass|sass) (defaults <span class=\"keyword\">to</span> plain css)</div><div class=\"line\">        --git           <span class=\"built_in\">add</span> .gitignore</div><div class=\"line\">    -<span class=\"keyword\">f</span>, --force         force <span class=\"keyword\">on</span> non-<span class=\"built_in\">empty</span> directory</div></pre></td></tr></table></figure>\n<p>例如，下面的示例就是在当前工作目录下创建一个命名为 myapp 的应用。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ express myapp</div><div class=\"line\"></div><div class=\"line\">   <span class=\"string\">create :</span> myapp</div><div class=\"line\">   <span class=\"string\">create :</span> myapp/<span class=\"keyword\">package</span>.json</div><div class=\"line\">   <span class=\"string\">create :</span> myapp/app.js</div><div class=\"line\">   <span class=\"string\">create :</span> myapp/<span class=\"keyword\">public</span></div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/public/</span>javascripts</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/public/</span>images</div><div class=\"line\">   <span class=\"string\">create :</span> myapp/routes</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/routes/</span>index.js</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/routes/</span>users.js</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/public/</span>stylesheets</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/public/</span>stylesheets/style.css</div><div class=\"line\">   <span class=\"string\">create :</span> myapp/views</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/views/</span>index.jade</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/views/</span>layout.jade</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/views/</span>error.jade</div><div class=\"line\">   <span class=\"string\">create :</span> myapp/bin</div><div class=\"line\">   <span class=\"string\">create :</span> myapp<span class=\"regexp\">/bin/</span>www</div></pre></td></tr></table></figure>\n<p>然后安装所有依赖包：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>cd myapp </div><div class=\"line\"><span class=\"variable\">$ </span>npm install</div></pre></td></tr></table></figure>\n<p>启动这个应用（MacOS 或 Linux 平台）：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ DEBUG=myapp <span class=\"built_in\">npm</span> start</div></pre></td></tr></table></figure>\n<p>Windows 平台使用如下命令：</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"built_in\">set</span> DEBUG=myapp &amp; npm <span class=\"built_in\">start</span></div></pre></td></tr></table></figure>\n<p>然后在浏览器中打开 <a href=\"http://localhost:3000/\">http://localhost:3000/</a> 网址就可以看到这个应用了。i</p>\n<p>通过 Express 应用生成器创建的应用一般都有如下目录结构：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── app<span class=\"selector-class\">.js</span></div><div class=\"line\">├── bin</div><div class=\"line\">│   └── www</div><div class=\"line\">├── package<span class=\"selector-class\">.json</span></div><div class=\"line\">├── public</div><div class=\"line\">│   ├── images</div><div class=\"line\">│   ├── javascripts</div><div class=\"line\">│   └── stylesheets</div><div class=\"line\">│       └── style<span class=\"selector-class\">.css</span></div><div class=\"line\">├── routes</div><div class=\"line\">│   ├── index<span class=\"selector-class\">.js</span></div><div class=\"line\">│   └── users<span class=\"selector-class\">.js</span></div><div class=\"line\">└── views</div><div class=\"line\">    ├── error<span class=\"selector-class\">.jade</span></div><div class=\"line\">    ├── index<span class=\"selector-class\">.jade</span></div><div class=\"line\">    └── layout.jade</div></pre></td></tr></table></figure>\n<p>7 directories, 9 files</p>\n"},{"title":"如何在Mac OS X中开启或关闭显示隐藏文件命令","date":"2016-10-27T05:54:18.000Z","_content":"安装包下载地址：[mongodb-win32-x86_64-2.6.6](http://pan.baidu.com/s/1eRGWWXs)\n\n1.解压到当前文件夹，进到目录mongodb-win32-x86_64-2.6.6，在这里新建data文件夹，\n![jojo's blog](http://img.blog.csdn.net/20161019140103561)\n\n2.进到data目录下，在这里新建db文件夹，\n\n![jojo's blog](http://img.blog.csdn.net/20161019140134843)\n\n3.命令行进到bin目录下，输入\n>mongod --dbpath ../data/db\n\n![jojo's blog](http://img.blog.csdn.net/20161019140147143)\n\n回车后数据库成功启动，端口号27017\n![jojo's blog](http://img.blog.csdn.net/20161019140158378)\n\n4.新打开命令行命令行进到bin目录下，输入\n>mongo\n\n按回车键\n\n![jojo's blog](http://img.blog.csdn.net/20161019140213360)\n\n5.进到命令行窗口，这里你可以操作数据库了，来\n(1) 创建数据库\n>use myMongoDB\n\n![jojo's blog](http://img.blog.csdn.net/20161019140227784)\n\n(2)查看所有数据库\n>show dbs\n\n![jojo's blog](http://img.blog.csdn.net/20161019140330675)\n\n\n参考地址 http://www.runoob.com/mongodb/mongodb-create-database.html\n\n6.关闭数据库，很重要，不正常关闭下次启动有可能会异常\n>use admin\n>db.shutdownServer()\n\n![jojo's blog](http://img.blog.csdn.net/20161019135738938)\n\n切换数据库启动的命令行看下，数据库已经关闭了！\n\n![jojo's blog](http://img.blog.csdn.net/20161019140901697)","source":"_posts/MongoDB安装、启动与关闭.md","raw":"---\ntitle: 如何在Mac OS X中开启或关闭显示隐藏文件命令\ndate: 2016-10-27 13:54:18\ntags:\n---\n安装包下载地址：[mongodb-win32-x86_64-2.6.6](http://pan.baidu.com/s/1eRGWWXs)\n\n1.解压到当前文件夹，进到目录mongodb-win32-x86_64-2.6.6，在这里新建data文件夹，\n![jojo's blog](http://img.blog.csdn.net/20161019140103561)\n\n2.进到data目录下，在这里新建db文件夹，\n\n![jojo's blog](http://img.blog.csdn.net/20161019140134843)\n\n3.命令行进到bin目录下，输入\n>mongod --dbpath ../data/db\n\n![jojo's blog](http://img.blog.csdn.net/20161019140147143)\n\n回车后数据库成功启动，端口号27017\n![jojo's blog](http://img.blog.csdn.net/20161019140158378)\n\n4.新打开命令行命令行进到bin目录下，输入\n>mongo\n\n按回车键\n\n![jojo's blog](http://img.blog.csdn.net/20161019140213360)\n\n5.进到命令行窗口，这里你可以操作数据库了，来\n(1) 创建数据库\n>use myMongoDB\n\n![jojo's blog](http://img.blog.csdn.net/20161019140227784)\n\n(2)查看所有数据库\n>show dbs\n\n![jojo's blog](http://img.blog.csdn.net/20161019140330675)\n\n\n参考地址 http://www.runoob.com/mongodb/mongodb-create-database.html\n\n6.关闭数据库，很重要，不正常关闭下次启动有可能会异常\n>use admin\n>db.shutdownServer()\n\n![jojo's blog](http://img.blog.csdn.net/20161019135738938)\n\n切换数据库启动的命令行看下，数据库已经关闭了！\n\n![jojo's blog](http://img.blog.csdn.net/20161019140901697)","slug":"MongoDB安装、启动与关闭","published":1,"updated":"2016-10-27T06:52:53.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciut34btd0001b8g202n0e2uk","content":"<p>安装包下载地址：<a href=\"http://pan.baidu.com/s/1eRGWWXs\" target=\"_blank\" rel=\"external\">mongodb-win32-x86_64-2.6.6</a></p>\n<p>1.解压到当前文件夹，进到目录mongodb-win32-x86_64-2.6.6，在这里新建data文件夹，<br><img src=\"http://img.blog.csdn.net/20161019140103561\" alt=\"jojo&#39;s blog\"></p>\n<p>2.进到data目录下，在这里新建db文件夹，</p>\n<p><img src=\"http://img.blog.csdn.net/20161019140134843\" alt=\"jojo&#39;s blog\"></p>\n<p>3.命令行进到bin目录下，输入</p>\n<blockquote>\n<p>mongod –dbpath ../data/db</p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161019140147143\" alt=\"jojo&#39;s blog\"></p>\n<p>回车后数据库成功启动，端口号27017<br><img src=\"http://img.blog.csdn.net/20161019140158378\" alt=\"jojo&#39;s blog\"></p>\n<p>4.新打开命令行命令行进到bin目录下，输入</p>\n<blockquote>\n<p>mongo</p>\n</blockquote>\n<p>按回车键</p>\n<p><img src=\"http://img.blog.csdn.net/20161019140213360\" alt=\"jojo&#39;s blog\"></p>\n<p>5.进到命令行窗口，这里你可以操作数据库了，来<br>(1) 创建数据库</p>\n<blockquote>\n<p>use myMongoDB</p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161019140227784\" alt=\"jojo&#39;s blog\"></p>\n<p>(2)查看所有数据库</p>\n<blockquote>\n<p>show dbs</p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161019140330675\" alt=\"jojo&#39;s blog\"></p>\n<p>参考地址 <a href=\"http://www.runoob.com/mongodb/mongodb-create-database.html\" target=\"_blank\" rel=\"external\">http://www.runoob.com/mongodb/mongodb-create-database.html</a></p>\n<p>6.关闭数据库，很重要，不正常关闭下次启动有可能会异常</p>\n<blockquote>\n<p>use admin<br>db.shutdownServer()</p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161019135738938\" alt=\"jojo&#39;s blog\"></p>\n<p>切换数据库启动的命令行看下，数据库已经关闭了！</p>\n<p><img src=\"http://img.blog.csdn.net/20161019140901697\" alt=\"jojo&#39;s blog\"></p>\n","excerpt":"","more":"<p>安装包下载地址：<a href=\"http://pan.baidu.com/s/1eRGWWXs\">mongodb-win32-x86_64-2.6.6</a></p>\n<p>1.解压到当前文件夹，进到目录mongodb-win32-x86_64-2.6.6，在这里新建data文件夹，<br><img src=\"http://img.blog.csdn.net/20161019140103561\" alt=\"jojo&#39;s blog\"></p>\n<p>2.进到data目录下，在这里新建db文件夹，</p>\n<p><img src=\"http://img.blog.csdn.net/20161019140134843\" alt=\"jojo&#39;s blog\"></p>\n<p>3.命令行进到bin目录下，输入</p>\n<blockquote>\n<p>mongod –dbpath ../data/db</p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161019140147143\" alt=\"jojo&#39;s blog\"></p>\n<p>回车后数据库成功启动，端口号27017<br><img src=\"http://img.blog.csdn.net/20161019140158378\" alt=\"jojo&#39;s blog\"></p>\n<p>4.新打开命令行命令行进到bin目录下，输入</p>\n<blockquote>\n<p>mongo</p>\n</blockquote>\n<p>按回车键</p>\n<p><img src=\"http://img.blog.csdn.net/20161019140213360\" alt=\"jojo&#39;s blog\"></p>\n<p>5.进到命令行窗口，这里你可以操作数据库了，来<br>(1) 创建数据库</p>\n<blockquote>\n<p>use myMongoDB</p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161019140227784\" alt=\"jojo&#39;s blog\"></p>\n<p>(2)查看所有数据库</p>\n<blockquote>\n<p>show dbs</p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161019140330675\" alt=\"jojo&#39;s blog\"></p>\n<p>参考地址 <a href=\"http://www.runoob.com/mongodb/mongodb-create-database.html\">http://www.runoob.com/mongodb/mongodb-create-database.html</a></p>\n<p>6.关闭数据库，很重要，不正常关闭下次启动有可能会异常</p>\n<blockquote>\n<p>use admin<br>db.shutdownServer()</p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161019135738938\" alt=\"jojo&#39;s blog\"></p>\n<p>切换数据库启动的命令行看下，数据库已经关闭了！</p>\n<p><img src=\"http://img.blog.csdn.net/20161019140901697\" alt=\"jojo&#39;s blog\"></p>\n"},{"title":"grunt livereload nodemon grunt集成自动重启（实例）","date":"2016-10-27T05:54:18.000Z","_content":"1、安装express-generator：\n\n参见[http://blog.csdn.net/weixin_36401046/article/details/52860827](http://blog.csdn.net/weixin_36401046/article/details/52860827) \n\n2、在D盘下新建目录grunt-liveredload-demo，打开命令行，进入grunt-liveredload-demo目录，\n\n初始化myapp这个项目目录\n\n```\n> express myapp\n```\n![jojo's blog](http://img.blog.csdn.net/20161020110418979)\n\n```\n> cd myapp\n```\n\n```\n> npm install\n```\n\n\n3、在项目根目录myapp下新建Gruntfile.js文件，配置Gruntfile.js文件，内容如下：\n\n```\nmodule.exports=function(grunt){ \n    //任务配置 \n    grunt.initConfig({ \n    \twatch:{\n    \t\thtml:{\n    \t\t\tfiles:['views/**'],\n    \t\t\toption:{\n    \t\t\t\tlivereload:true\n    \t\t\t}\n    \t\t}\n    \t},\n    \tnodemon:{\n    \t\tdev:{\n    \t\t\tscript:'bin/www',\n    \t\t\toptions:{\n    \t\t\t\tenv:{\n    \t\t\t\t\tport:3000\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t},\n    \tconcurrent:{\n    \t\ttasks:['nodemon','watch'],\n    \t\toptions:{\n               logConcurrentOutput:true\n    \t\t}\n    \t\t\n    \t}\n    }); \n    //载入任务 \n    grunt.loadNpmTasks('grunt-contrib-watch'); \n    grunt.loadNpmTasks('grunt-nodemon'); \n    grunt.loadNpmTasks('grunt-concurrent'); \n    //注册任务 \n    grunt.registerTask('serve',['concurrent']); \n} \n```\n\n\n4、安装grunt、grunt-contrib-watch、grunt-nodemon、grunt-concurrent四个模块:\n\n```\n> npm install grunt --save-dev\n```\n```\n> npm install grunt-contrib-watch --save-dev\n```\n```\n> npm install grunt-nodemon --save-dev\n```\n```\n> npm install grunt-concurrent --save-dev\n```\n\n![jojo's blog](http://img.blog.csdn.net/20161020141702197)\n\n\n\n5、启动grunt\n\n```\n>grunt serve\n```\n\n![jojo's blog](http://img.blog.csdn.net/20161020142203231)\n\n6、修改文件，app就可以自动重启了","source":"_posts/grunt livereload nodemon grunt集成自动重启（实例）.md","raw":"---\ntitle: grunt livereload nodemon grunt集成自动重启（实例）\ndate: 2016-10-27 13:54:18\ntags:\n---\n1、安装express-generator：\n\n参见[http://blog.csdn.net/weixin_36401046/article/details/52860827](http://blog.csdn.net/weixin_36401046/article/details/52860827) \n\n2、在D盘下新建目录grunt-liveredload-demo，打开命令行，进入grunt-liveredload-demo目录，\n\n初始化myapp这个项目目录\n\n```\n> express myapp\n```\n![jojo's blog](http://img.blog.csdn.net/20161020110418979)\n\n```\n> cd myapp\n```\n\n```\n> npm install\n```\n\n\n3、在项目根目录myapp下新建Gruntfile.js文件，配置Gruntfile.js文件，内容如下：\n\n```\nmodule.exports=function(grunt){ \n    //任务配置 \n    grunt.initConfig({ \n    \twatch:{\n    \t\thtml:{\n    \t\t\tfiles:['views/**'],\n    \t\t\toption:{\n    \t\t\t\tlivereload:true\n    \t\t\t}\n    \t\t}\n    \t},\n    \tnodemon:{\n    \t\tdev:{\n    \t\t\tscript:'bin/www',\n    \t\t\toptions:{\n    \t\t\t\tenv:{\n    \t\t\t\t\tport:3000\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t},\n    \tconcurrent:{\n    \t\ttasks:['nodemon','watch'],\n    \t\toptions:{\n               logConcurrentOutput:true\n    \t\t}\n    \t\t\n    \t}\n    }); \n    //载入任务 \n    grunt.loadNpmTasks('grunt-contrib-watch'); \n    grunt.loadNpmTasks('grunt-nodemon'); \n    grunt.loadNpmTasks('grunt-concurrent'); \n    //注册任务 \n    grunt.registerTask('serve',['concurrent']); \n} \n```\n\n\n4、安装grunt、grunt-contrib-watch、grunt-nodemon、grunt-concurrent四个模块:\n\n```\n> npm install grunt --save-dev\n```\n```\n> npm install grunt-contrib-watch --save-dev\n```\n```\n> npm install grunt-nodemon --save-dev\n```\n```\n> npm install grunt-concurrent --save-dev\n```\n\n![jojo's blog](http://img.blog.csdn.net/20161020141702197)\n\n\n\n5、启动grunt\n\n```\n>grunt serve\n```\n\n![jojo's blog](http://img.blog.csdn.net/20161020142203231)\n\n6、修改文件，app就可以自动重启了","slug":"grunt livereload nodemon grunt集成自动重启（实例）","published":1,"updated":"2016-10-27T06:56:42.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciut34bu70002b8g2z82keld4","content":"<p>1、安装express-generator：</p>\n<p>参见<a href=\"http://blog.csdn.net/weixin_36401046/article/details/52860827\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/weixin_36401046/article/details/52860827</a> </p>\n<p>2、在D盘下新建目录grunt-liveredload-demo，打开命令行，进入grunt-liveredload-demo目录，</p>\n<p>初始化myapp这个项目目录</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"quote\">&gt; express myapp</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161020110418979\" alt=\"jojo&#39;s blog\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"built_in\">cd</span> myapp</div></pre></td></tr></table></figure>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm <span class=\"keyword\">install</span></div></pre></td></tr></table></figure>\n<p>3、在项目根目录myapp下新建Gruntfile.js文件，配置Gruntfile.js文件，内容如下：</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports=<span class=\"keyword\">function</span>(grunt)&#123; </div><div class=\"line\">    //任务配置 </div><div class=\"line\">    grunt.initConfig(&#123; </div><div class=\"line\">    \twatch:&#123;</div><div class=\"line\">    \t\thtml:&#123;</div><div class=\"line\">    \t\t\tfiles:[<span class=\"string\">'views/**'</span>],</div><div class=\"line\">    \t\t\toption:&#123;</div><div class=\"line\">    \t\t\t\tlivereload:true</div><div class=\"line\">    \t\t\t&#125;</div><div class=\"line\">    \t\t&#125;</div><div class=\"line\">    \t&#125;,</div><div class=\"line\">    \tnodemon:&#123;</div><div class=\"line\">    \t\tdev:&#123;</div><div class=\"line\">    \t\t\tscript:<span class=\"string\">'bin/www'</span>,</div><div class=\"line\">    \t\t\toptions:&#123;</div><div class=\"line\">    \t\t\t\tenv:&#123;</div><div class=\"line\">    \t\t\t\t\tport:<span class=\"number\">3000</span></div><div class=\"line\">    \t\t\t\t&#125;</div><div class=\"line\">    \t\t\t&#125;</div><div class=\"line\">    \t\t&#125;</div><div class=\"line\">    \t&#125;,</div><div class=\"line\">    \tconcurrent:&#123;</div><div class=\"line\">    \t\ttasks:[<span class=\"string\">'nodemon'</span>,<span class=\"string\">'watch'</span>],</div><div class=\"line\">    \t\toptions:&#123;</div><div class=\"line\">               logConcurrentOutput:true</div><div class=\"line\">    \t\t&#125;</div><div class=\"line\">    \t\t</div><div class=\"line\">    \t&#125;</div><div class=\"line\">    &#125;); </div><div class=\"line\">    //载入任务 </div><div class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-watch'</span>); </div><div class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-nodemon'</span>); </div><div class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-concurrent'</span>); </div><div class=\"line\">    //注册任务 </div><div class=\"line\">    grunt.registerTask(<span class=\"string\">'serve'</span>,[<span class=\"string\">'concurrent'</span>]); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4、安装grunt、grunt-contrib-watch、grunt-nodemon、grunt-concurrent四个模块:</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm install grunt --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm install grunt-contrib-watch --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm install grunt-nodemon --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm install grunt-concurrent --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161020141702197\" alt=\"jojo&#39;s blog\"></p>\n<p>5、启动grunt</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;grunt serve</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161020142203231\" alt=\"jojo&#39;s blog\"></p>\n<p>6、修改文件，app就可以自动重启了</p>\n","excerpt":"","more":"<p>1、安装express-generator：</p>\n<p>参见<a href=\"http://blog.csdn.net/weixin_36401046/article/details/52860827\">http://blog.csdn.net/weixin_36401046/article/details/52860827</a> </p>\n<p>2、在D盘下新建目录grunt-liveredload-demo，打开命令行，进入grunt-liveredload-demo目录，</p>\n<p>初始化myapp这个项目目录</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"quote\">&gt; express myapp</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161020110418979\" alt=\"jojo&#39;s blog\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"built_in\">cd</span> myapp</div></pre></td></tr></table></figure>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm <span class=\"keyword\">install</span></div></pre></td></tr></table></figure>\n<p>3、在项目根目录myapp下新建Gruntfile.js文件，配置Gruntfile.js文件，内容如下：</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports=<span class=\"keyword\">function</span>(grunt)&#123; </div><div class=\"line\">    //任务配置 </div><div class=\"line\">    grunt.initConfig(&#123; </div><div class=\"line\">    \twatch:&#123;</div><div class=\"line\">    \t\thtml:&#123;</div><div class=\"line\">    \t\t\tfiles:[<span class=\"string\">'views/**'</span>],</div><div class=\"line\">    \t\t\toption:&#123;</div><div class=\"line\">    \t\t\t\tlivereload:true</div><div class=\"line\">    \t\t\t&#125;</div><div class=\"line\">    \t\t&#125;</div><div class=\"line\">    \t&#125;,</div><div class=\"line\">    \tnodemon:&#123;</div><div class=\"line\">    \t\tdev:&#123;</div><div class=\"line\">    \t\t\tscript:<span class=\"string\">'bin/www'</span>,</div><div class=\"line\">    \t\t\toptions:&#123;</div><div class=\"line\">    \t\t\t\tenv:&#123;</div><div class=\"line\">    \t\t\t\t\tport:<span class=\"number\">3000</span></div><div class=\"line\">    \t\t\t\t&#125;</div><div class=\"line\">    \t\t\t&#125;</div><div class=\"line\">    \t\t&#125;</div><div class=\"line\">    \t&#125;,</div><div class=\"line\">    \tconcurrent:&#123;</div><div class=\"line\">    \t\ttasks:[<span class=\"string\">'nodemon'</span>,<span class=\"string\">'watch'</span>],</div><div class=\"line\">    \t\toptions:&#123;</div><div class=\"line\">               logConcurrentOutput:true</div><div class=\"line\">    \t\t&#125;</div><div class=\"line\">    \t\t</div><div class=\"line\">    \t&#125;</div><div class=\"line\">    &#125;); </div><div class=\"line\">    //载入任务 </div><div class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-watch'</span>); </div><div class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-nodemon'</span>); </div><div class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-concurrent'</span>); </div><div class=\"line\">    //注册任务 </div><div class=\"line\">    grunt.registerTask(<span class=\"string\">'serve'</span>,[<span class=\"string\">'concurrent'</span>]); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4、安装grunt、grunt-contrib-watch、grunt-nodemon、grunt-concurrent四个模块:</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm install grunt --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm install grunt-contrib-watch --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm install grunt-nodemon --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm install grunt-concurrent --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161020141702197\" alt=\"jojo&#39;s blog\"></p>\n<p>5、启动grunt</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;grunt serve</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161020142203231\" alt=\"jojo&#39;s blog\"></p>\n<p>6、修改文件，app就可以自动重启了</p>\n"},{"title":"git手册","date":"2016-10-27T05:54:18.000Z","_content":"\ngit init                                                  # 初始化本地git仓库（创建新仓库）\ngit config --global user.name \"xxx\"                       # 配置用户名\ngit config --global user.email \"xxx@xxx.com\"              # 配置邮件\ngit config --global color.ui true                         # git status等命令自动着色\ngit config --global color.status auto\ngit config --global color.diff auto\ngit config --global color.branch auto\ngit config --global color.interactive auto\ngit config --list 配置列表\ngit clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库\ngit status                                                # 查看当前版本状态（是否修改）\ngit add xyz                                               # 添加xyz文件至index\ngit add .                                                 # 增加当前子目录下所有更改过的文件至index\ngit commit -m 'xxx'                                       # 提交\ngit commit --amend -m 'xxx'                               # 合并上一次提交（用于反复修改）\ngit commit -am 'xxx'                                      # 将add和commit合为一步\ngit rm xxx                                                # 删除index中的文件\ngit rm -r *                                               # 递归删除\ngit log                                                   # 显示提交日志\ngit log -1                                                # 显示1行日志 -n为n行\ngit log -5\ngit log --stat                                            # 显示提交日志及相关变动文件\ngit log -p -m\ngit show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容\ngit show dfb02                                            # 可只用commitid的前几位\ngit show HEAD                                             # 显示HEAD提交日志\ngit show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本\ngit tag                                                   # 显示已存在的tag\ngit tag -a v2.0 -m 'xxx'                                  # 增加v2.0的tag\ngit show v2.0                                             # 显示v2.0的日志及详细内容\ngit log v2.0                                              # 显示v2.0的日志\ngit diff                                                  # 显示所有未添加至index的变更\ngit diff --cached                                         # 显示所有已添加index但还未commit的变更\ngit diff HEAD^                                            # 比较与上一个版本的差异\ngit diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异\ngit diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的\ngit diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容\ngit remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）\ngit branch                                                # 显示本地分支\ngit branch --contains 50089                               # 显示包含提交50089的分支\ngit branch -a                                             # 显示所有分支\ngit branch -r                                             # 显示所有原创分支\ngit branch --merged                                       # 显示所有已合并到当前分支的分支\ngit branch --no-merged                                    # 显示所有未合并到当前分支的分支\ngit branch -m master master_copy                          # 本地分支改名\ngit checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出\ngit checkout -b master master_copy                        # 上面的完整版\ngit checkout features/performance                         # 检出已存在的features/performance分支\ngit checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支\ngit checkout v2.0                                         # 检出版本v2.0\ngit checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出\ngit checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）\ngit merge origin/master                                   # 合并远程master分支至当前分支\ngit cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改\ngit push origin master                                    # 将当前分支push到远程master分支\ngit push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支\ngit push --tags                                           # 把所有tag推送到远程仓库\ngit fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）\ngit fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支\ngit pull origin master                                    # 获取远程分支master并merge到当前分支\ngit mv README README2                                     # 重命名文件README为README2\ngit reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）\ngit rebase\ngit branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）\ngit branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933\ngit ls-files                                              # 列出git index包含的文件\ngit show-branch                                           # 图示当前分支历史\ngit show-branch --all                                     # 图示所有分支历史\ngit whatchanged                                           # 显示提交历史对应的文件修改\ngit revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818\ngit ls-tree HEAD                                          # 内部命令：显示某个git对象\ngit rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH\ngit reflog                                                # 显示所有提交，包括孤立节点\ngit show HEAD@{5}\ngit show master@{yesterday}                               # 显示master分支昨天的状态\ngit log --pretty=format:'%h %s' --graph                   # 图示提交日志\ngit show HEAD~3\ngit show -s --pretty=raw 2be7fcb476\ngit stash                                                 # 暂存当前修改，将所有至为HEAD状态\ngit stash list                                            # 查看所有暂存\ngit stash show -p stash@{0}                               # 参考第一次暂存\ngit stash apply stash@{0}                                 # 应用第一次暂存\ngit grep \"delete from\"                                    # 文件中搜索文本“delete from”\ngit grep -e '#define' --and -e SORT_DIRENT\ngit gc\ngit fsck","source":"_posts/git手册.md","raw":"---\ntitle: git手册\ndate: 2016-10-27 13:54:18\ntags:\n---\n\ngit init                                                  # 初始化本地git仓库（创建新仓库）\ngit config --global user.name \"xxx\"                       # 配置用户名\ngit config --global user.email \"xxx@xxx.com\"              # 配置邮件\ngit config --global color.ui true                         # git status等命令自动着色\ngit config --global color.status auto\ngit config --global color.diff auto\ngit config --global color.branch auto\ngit config --global color.interactive auto\ngit config --list 配置列表\ngit clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库\ngit status                                                # 查看当前版本状态（是否修改）\ngit add xyz                                               # 添加xyz文件至index\ngit add .                                                 # 增加当前子目录下所有更改过的文件至index\ngit commit -m 'xxx'                                       # 提交\ngit commit --amend -m 'xxx'                               # 合并上一次提交（用于反复修改）\ngit commit -am 'xxx'                                      # 将add和commit合为一步\ngit rm xxx                                                # 删除index中的文件\ngit rm -r *                                               # 递归删除\ngit log                                                   # 显示提交日志\ngit log -1                                                # 显示1行日志 -n为n行\ngit log -5\ngit log --stat                                            # 显示提交日志及相关变动文件\ngit log -p -m\ngit show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容\ngit show dfb02                                            # 可只用commitid的前几位\ngit show HEAD                                             # 显示HEAD提交日志\ngit show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本\ngit tag                                                   # 显示已存在的tag\ngit tag -a v2.0 -m 'xxx'                                  # 增加v2.0的tag\ngit show v2.0                                             # 显示v2.0的日志及详细内容\ngit log v2.0                                              # 显示v2.0的日志\ngit diff                                                  # 显示所有未添加至index的变更\ngit diff --cached                                         # 显示所有已添加index但还未commit的变更\ngit diff HEAD^                                            # 比较与上一个版本的差异\ngit diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异\ngit diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的\ngit diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容\ngit remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）\ngit branch                                                # 显示本地分支\ngit branch --contains 50089                               # 显示包含提交50089的分支\ngit branch -a                                             # 显示所有分支\ngit branch -r                                             # 显示所有原创分支\ngit branch --merged                                       # 显示所有已合并到当前分支的分支\ngit branch --no-merged                                    # 显示所有未合并到当前分支的分支\ngit branch -m master master_copy                          # 本地分支改名\ngit checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出\ngit checkout -b master master_copy                        # 上面的完整版\ngit checkout features/performance                         # 检出已存在的features/performance分支\ngit checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支\ngit checkout v2.0                                         # 检出版本v2.0\ngit checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出\ngit checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）\ngit merge origin/master                                   # 合并远程master分支至当前分支\ngit cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改\ngit push origin master                                    # 将当前分支push到远程master分支\ngit push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支\ngit push --tags                                           # 把所有tag推送到远程仓库\ngit fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）\ngit fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支\ngit pull origin master                                    # 获取远程分支master并merge到当前分支\ngit mv README README2                                     # 重命名文件README为README2\ngit reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）\ngit rebase\ngit branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）\ngit branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933\ngit ls-files                                              # 列出git index包含的文件\ngit show-branch                                           # 图示当前分支历史\ngit show-branch --all                                     # 图示所有分支历史\ngit whatchanged                                           # 显示提交历史对应的文件修改\ngit revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818\ngit ls-tree HEAD                                          # 内部命令：显示某个git对象\ngit rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH\ngit reflog                                                # 显示所有提交，包括孤立节点\ngit show HEAD@{5}\ngit show master@{yesterday}                               # 显示master分支昨天的状态\ngit log --pretty=format:'%h %s' --graph                   # 图示提交日志\ngit show HEAD~3\ngit show -s --pretty=raw 2be7fcb476\ngit stash                                                 # 暂存当前修改，将所有至为HEAD状态\ngit stash list                                            # 查看所有暂存\ngit stash show -p stash@{0}                               # 参考第一次暂存\ngit stash apply stash@{0}                                 # 应用第一次暂存\ngit grep \"delete from\"                                    # 文件中搜索文本“delete from”\ngit grep -e '#define' --and -e SORT_DIRENT\ngit gc\ngit fsck","slug":"git手册","published":1,"updated":"2016-10-27T06:56:53.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciut34bub0003b8g2iqhf4hz0","content":"<p>git init                                                  # 初始化本地git仓库（创建新仓库）<br>git config –global user.name “xxx”                       # 配置用户名<br>git config –global user.email “xxx@xxx.com”              # 配置邮件<br>git config –global color.ui true                         # git status等命令自动着色<br>git config –global color.status auto<br>git config –global color.diff auto<br>git config –global color.branch auto<br>git config –global color.interactive auto<br>git config –list 配置列表<br>git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库<br>git status                                                # 查看当前版本状态（是否修改）<br>git add xyz                                               # 添加xyz文件至index<br>git add .                                                 # 增加当前子目录下所有更改过的文件至index<br>git commit -m ‘xxx’                                       # 提交<br>git commit –amend -m ‘xxx’                               # 合并上一次提交（用于反复修改）<br>git commit -am ‘xxx’                                      # 将add和commit合为一步<br>git rm xxx                                                # 删除index中的文件<br>git rm -r *                                               # 递归删除<br>git log                                                   # 显示提交日志<br>git log -1                                                # 显示1行日志 -n为n行<br>git log -5<br>git log –stat                                            # 显示提交日志及相关变动文件<br>git log -p -m<br>git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容<br>git show dfb02                                            # 可只用commitid的前几位<br>git show HEAD                                             # 显示HEAD提交日志<br>git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本<br>git tag                                                   # 显示已存在的tag<br>git tag -a v2.0 -m ‘xxx’                                  # 增加v2.0的tag<br>git show v2.0                                             # 显示v2.0的日志及详细内容<br>git log v2.0                                              # 显示v2.0的日志<br>git diff                                                  # 显示所有未添加至index的变更<br>git diff –cached                                         # 显示所有已添加index但还未commit的变更<br>git diff HEAD^                                            # 比较与上一个版本的差异<br>git diff HEAD – ./lib                                    # 比较与HEAD版本lib目录的差异<br>git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的<br>git diff origin/master..master –stat                     # 只显示差异的文件，不显示具体内容<br>git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）<br>git branch                                                # 显示本地分支<br>git branch –contains 50089                               # 显示包含提交50089的分支<br>git branch -a                                             # 显示所有分支<br>git branch -r                                             # 显示所有原创分支<br>git branch –merged                                       # 显示所有已合并到当前分支的分支<br>git branch –no-merged                                    # 显示所有未合并到当前分支的分支<br>git branch -m master master_copy                          # 本地分支改名<br>git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出<br>git checkout -b master master_copy                        # 上面的完整版<br>git checkout features/performance                         # 检出已存在的features/performance分支<br>git checkout –track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支<br>git checkout v2.0                                         # 检出版本v2.0<br>git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出<br>git checkout – README                                    # 检出head版本的README文件（可用于修改错误回退）<br>git merge origin/master                                   # 合并远程master分支至当前分支<br>git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改<br>git push origin master                                    # 将当前分支push到远程master分支<br>git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支<br>git push –tags                                           # 把所有tag推送到远程仓库<br>git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）<br>git fetch –prune                                         # 获取所有原创分支并清除服务器上已删掉的分支<br>git pull origin master                                    # 获取远程分支master并merge到当前分支<br>git mv README README2                                     # 重命名文件README为README2<br>git reset –hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）<br>git rebase<br>git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）<br>git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933<br>git ls-files                                              # 列出git index包含的文件<br>git show-branch                                           # 图示当前分支历史<br>git show-branch –all                                     # 图示所有分支历史<br>git whatchanged                                           # 显示提交历史对应的文件修改<br>git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818<br>git ls-tree HEAD                                          # 内部命令：显示某个git对象<br>git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH<br>git reflog                                                # 显示所有提交，包括孤立节点<br>git show HEAD@{5}<br>git show master@{yesterday}                               # 显示master分支昨天的状态<br>git log –pretty=format:’%h %s’ –graph                   # 图示提交日志<br>git show HEAD~3<br>git show -s –pretty=raw 2be7fcb476<br>git stash                                                 # 暂存当前修改，将所有至为HEAD状态<br>git stash list                                            # 查看所有暂存<br>git stash show -p stash@{0}                               # 参考第一次暂存<br>git stash apply stash@{0}                                 # 应用第一次暂存<br>git grep “delete from”                                    # 文件中搜索文本“delete from”<br>git grep -e ‘#define’ –and -e SORT_DIRENT<br>git gc<br>git fsck</p>\n","excerpt":"","more":"<p>git init                                                  # 初始化本地git仓库（创建新仓库）<br>git config –global user.name “xxx”                       # 配置用户名<br>git config –global user.email “xxx@xxx.com”              # 配置邮件<br>git config –global color.ui true                         # git status等命令自动着色<br>git config –global color.status auto<br>git config –global color.diff auto<br>git config –global color.branch auto<br>git config –global color.interactive auto<br>git config –list 配置列表<br>git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库<br>git status                                                # 查看当前版本状态（是否修改）<br>git add xyz                                               # 添加xyz文件至index<br>git add .                                                 # 增加当前子目录下所有更改过的文件至index<br>git commit -m ‘xxx’                                       # 提交<br>git commit –amend -m ‘xxx’                               # 合并上一次提交（用于反复修改）<br>git commit -am ‘xxx’                                      # 将add和commit合为一步<br>git rm xxx                                                # 删除index中的文件<br>git rm -r *                                               # 递归删除<br>git log                                                   # 显示提交日志<br>git log -1                                                # 显示1行日志 -n为n行<br>git log -5<br>git log –stat                                            # 显示提交日志及相关变动文件<br>git log -p -m<br>git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容<br>git show dfb02                                            # 可只用commitid的前几位<br>git show HEAD                                             # 显示HEAD提交日志<br>git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本<br>git tag                                                   # 显示已存在的tag<br>git tag -a v2.0 -m ‘xxx’                                  # 增加v2.0的tag<br>git show v2.0                                             # 显示v2.0的日志及详细内容<br>git log v2.0                                              # 显示v2.0的日志<br>git diff                                                  # 显示所有未添加至index的变更<br>git diff –cached                                         # 显示所有已添加index但还未commit的变更<br>git diff HEAD^                                            # 比较与上一个版本的差异<br>git diff HEAD – ./lib                                    # 比较与HEAD版本lib目录的差异<br>git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的<br>git diff origin/master..master –stat                     # 只显示差异的文件，不显示具体内容<br>git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）<br>git branch                                                # 显示本地分支<br>git branch –contains 50089                               # 显示包含提交50089的分支<br>git branch -a                                             # 显示所有分支<br>git branch -r                                             # 显示所有原创分支<br>git branch –merged                                       # 显示所有已合并到当前分支的分支<br>git branch –no-merged                                    # 显示所有未合并到当前分支的分支<br>git branch -m master master_copy                          # 本地分支改名<br>git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出<br>git checkout -b master master_copy                        # 上面的完整版<br>git checkout features/performance                         # 检出已存在的features/performance分支<br>git checkout –track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支<br>git checkout v2.0                                         # 检出版本v2.0<br>git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出<br>git checkout – README                                    # 检出head版本的README文件（可用于修改错误回退）<br>git merge origin/master                                   # 合并远程master分支至当前分支<br>git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改<br>git push origin master                                    # 将当前分支push到远程master分支<br>git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支<br>git push –tags                                           # 把所有tag推送到远程仓库<br>git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）<br>git fetch –prune                                         # 获取所有原创分支并清除服务器上已删掉的分支<br>git pull origin master                                    # 获取远程分支master并merge到当前分支<br>git mv README README2                                     # 重命名文件README为README2<br>git reset –hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）<br>git rebase<br>git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）<br>git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933<br>git ls-files                                              # 列出git index包含的文件<br>git show-branch                                           # 图示当前分支历史<br>git show-branch –all                                     # 图示所有分支历史<br>git whatchanged                                           # 显示提交历史对应的文件修改<br>git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818<br>git ls-tree HEAD                                          # 内部命令：显示某个git对象<br>git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH<br>git reflog                                                # 显示所有提交，包括孤立节点<br>git show HEAD@{5}<br>git show master@{yesterday}                               # 显示master分支昨天的状态<br>git log –pretty=format:’%h %s’ –graph                   # 图示提交日志<br>git show HEAD~3<br>git show -s –pretty=raw 2be7fcb476<br>git stash                                                 # 暂存当前修改，将所有至为HEAD状态<br>git stash list                                            # 查看所有暂存<br>git stash show -p stash@{0}                               # 参考第一次暂存<br>git stash apply stash@{0}                                 # 应用第一次暂存<br>git grep “delete from”                                    # 文件中搜索文本“delete from”<br>git grep -e ‘#define’ –and -e SORT_DIRENT<br>git gc<br>git fsck</p>\n"},{"title":"hexo d后 ERROR Deployer not found git","date":"2016-10-27T05:54:18.000Z","_content":"$ hexo d\nERROR Deployer not found: git\n>npm install hexo-deployer-git --save \n\n即可。","source":"_posts/hexo d后 ERROR Deployer not found- git.md","raw":"---\ntitle: hexo d后 ERROR Deployer not found git\ndate: 2016-10-27 13:54:18\ntags:\n---\n$ hexo d\nERROR Deployer not found: git\n>npm install hexo-deployer-git --save \n\n即可。","slug":"hexo d后 ERROR Deployer not found- git","published":1,"updated":"2016-10-27T06:59:12.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciut34bui0004b8g2p0sisehb","content":"<p>$ hexo d<br>ERROR Deployer not found: git</p>\n<blockquote>\n<p>npm install hexo-deployer-git –save </p>\n</blockquote>\n<p>即可。</p>\n","excerpt":"","more":"<p>$ hexo d<br>ERROR Deployer not found: git</p>\n<blockquote>\n<p>npm install hexo-deployer-git –save </p>\n</blockquote>\n<p>即可。</p>\n"},{"title":"hexo+github（windows版+http版），搭建Hexo博客并部署到Github","date":"2016-10-27T05:54:18.000Z","_content":"![jojo's blog](http://img.blog.csdn.net/20161026182636997)\n\n**工具/原料**\n•\tWindows（Mac也是差不多，可参照）\n•\tGit\n•\tNode.js\n\n**安装Hexo**\n\n1、利用 npm 命令即可安装。在任意位置点击鼠标右键，选择Git Bash。\n\n ![jojo's blog](http://img.blog.csdn.net/20161026182730919)\n \n2、输入命令：\n>npm install -g hexo\n\n>注意：-g是指全局安装hexo。\n\n**创建Hexo文件夹**\n\n1、新建文件夹 Hexo\n2、\n\n\n>cd Hexo\n\n>hexo init   //Hexo 即会自动在目标文件夹建立网站所需要的所有文件。\n\n>npm install   //安装依赖包\n\n**本地查看**\n•\t现在我们已经搭建起本地的hexo博客了，执行以下命令(在Hexo文件夹下)，然后到浏览器输入localhost:4000看看。\n>hexo generate\n\n>hexo server\n\n ![jojo's blog](http://img.blog.csdn.net/20161026183033027)\n\n**注册Github账号**\n•\t这里不演示了。\n\n**创建Repository仓库**\n\n登录github后，\n\n![jojo's blog](http://img.blog.csdn.net/20161027093752469)\n\n![jojo's blog](http://img.blog.csdn.net/20161027093814641)\n\n![jojo's blog](http://img.blog.csdn.net/20161027093832188)\n\n•\t注意：创建的时候注意Repository的名字。比如我的Github账号是jasmine-na，那么我应该创建的Repository的名字是：**jasmine-na.github.io**。\n(必须是Github账号名.github.io)\n\n![jojo's blog](http://img.blog.csdn.net/20161027093143442)\n\n**修改配置文件**\n1、到你刚刚创建的Repository下，找到以下内容：\n\n ![jojo's blog](http://img.blog.csdn.net/20161026183141935)\n\n2、先点击HTTPS，然后复制里面的地址。然后编辑_config.yml文件（在C:\\Hexo下）。\n ![jojo's blog](http://img.blog.csdn.net/20161026183201545)\n\n3、修改文件里面的deploy。其中的repository就改成你刚刚复制的地址。保存这个文件。\n\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/jasmine-na/jasmine-na.github.io.git\n  branch: master\n```\n\n![jojo's blog](http://img.blog.csdn.net/20161027094431301)\n\n（注意格式）\n\n**完成部署**\n\n1、下载hexo-deployer-git\n>npm install hexo-deployer-git –save\n\n2、最后一步，Git Bash下，依次键入以下指令：\n（注意：每次修改本地文件后，都需要依次键入以下指令）\n>hexo clean    //清除缓存文件 db.json 和已生成的静态文件 public \n\n>hexo generate //生成网站静态文件到默认设置的 public 文件夹\n\n>hexo deploy //自动生成网站静态文件，并部署到设定的仓库。\n\nhexo deploy过程中会提示你输入账号名和密码，Username是你的Github账号名称，而不是邮箱；Password就是你的Github的密码。\n\n ![jojo's blog](http://img.blog.csdn.net/20161026184053081)\n\n2、OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的用户名）：\nhttp://jasmine-na.github.io/\n\n![jojo's blog](http://img.blog.csdn.net/20161027101348580)\n\n\n**Tips**\n•\thexo现在支持更加简单的命令格式了，比如：\n>hexo g == hexo generate\n\n>hexo d == hexo deploy\n\n>hexo s == hexo server\n\n>hexo n == hexo new\n\n**更多文章：**\n[hexo+github（windows版+ssh版），搭建Hexo博客并部署到Github](http://blog.csdn.net/weixin_36401046/article/details/52937108)","source":"_posts/hexo+github（windows版+http版），搭建Hexo博客并部署到Github.md","raw":"---\ntitle: hexo+github（windows版+http版），搭建Hexo博客并部署到Github\ndate: 2016-10-27 13:54:18\ntags:\n---\n![jojo's blog](http://img.blog.csdn.net/20161026182636997)\n\n**工具/原料**\n•\tWindows（Mac也是差不多，可参照）\n•\tGit\n•\tNode.js\n\n**安装Hexo**\n\n1、利用 npm 命令即可安装。在任意位置点击鼠标右键，选择Git Bash。\n\n ![jojo's blog](http://img.blog.csdn.net/20161026182730919)\n \n2、输入命令：\n>npm install -g hexo\n\n>注意：-g是指全局安装hexo。\n\n**创建Hexo文件夹**\n\n1、新建文件夹 Hexo\n2、\n\n\n>cd Hexo\n\n>hexo init   //Hexo 即会自动在目标文件夹建立网站所需要的所有文件。\n\n>npm install   //安装依赖包\n\n**本地查看**\n•\t现在我们已经搭建起本地的hexo博客了，执行以下命令(在Hexo文件夹下)，然后到浏览器输入localhost:4000看看。\n>hexo generate\n\n>hexo server\n\n ![jojo's blog](http://img.blog.csdn.net/20161026183033027)\n\n**注册Github账号**\n•\t这里不演示了。\n\n**创建Repository仓库**\n\n登录github后，\n\n![jojo's blog](http://img.blog.csdn.net/20161027093752469)\n\n![jojo's blog](http://img.blog.csdn.net/20161027093814641)\n\n![jojo's blog](http://img.blog.csdn.net/20161027093832188)\n\n•\t注意：创建的时候注意Repository的名字。比如我的Github账号是jasmine-na，那么我应该创建的Repository的名字是：**jasmine-na.github.io**。\n(必须是Github账号名.github.io)\n\n![jojo's blog](http://img.blog.csdn.net/20161027093143442)\n\n**修改配置文件**\n1、到你刚刚创建的Repository下，找到以下内容：\n\n ![jojo's blog](http://img.blog.csdn.net/20161026183141935)\n\n2、先点击HTTPS，然后复制里面的地址。然后编辑_config.yml文件（在C:\\Hexo下）。\n ![jojo's blog](http://img.blog.csdn.net/20161026183201545)\n\n3、修改文件里面的deploy。其中的repository就改成你刚刚复制的地址。保存这个文件。\n\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/jasmine-na/jasmine-na.github.io.git\n  branch: master\n```\n\n![jojo's blog](http://img.blog.csdn.net/20161027094431301)\n\n（注意格式）\n\n**完成部署**\n\n1、下载hexo-deployer-git\n>npm install hexo-deployer-git –save\n\n2、最后一步，Git Bash下，依次键入以下指令：\n（注意：每次修改本地文件后，都需要依次键入以下指令）\n>hexo clean    //清除缓存文件 db.json 和已生成的静态文件 public \n\n>hexo generate //生成网站静态文件到默认设置的 public 文件夹\n\n>hexo deploy //自动生成网站静态文件，并部署到设定的仓库。\n\nhexo deploy过程中会提示你输入账号名和密码，Username是你的Github账号名称，而不是邮箱；Password就是你的Github的密码。\n\n ![jojo's blog](http://img.blog.csdn.net/20161026184053081)\n\n2、OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的用户名）：\nhttp://jasmine-na.github.io/\n\n![jojo's blog](http://img.blog.csdn.net/20161027101348580)\n\n\n**Tips**\n•\thexo现在支持更加简单的命令格式了，比如：\n>hexo g == hexo generate\n\n>hexo d == hexo deploy\n\n>hexo s == hexo server\n\n>hexo n == hexo new\n\n**更多文章：**\n[hexo+github（windows版+ssh版），搭建Hexo博客并部署到Github](http://blog.csdn.net/weixin_36401046/article/details/52937108)","slug":"hexo+github（windows版+http版），搭建Hexo博客并部署到Github","published":1,"updated":"2016-10-27T06:08:50.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciut34bup0005b8g2kwfeff2e","content":"<p><img src=\"http://img.blog.csdn.net/20161026182636997\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>工具/原料</strong><br>•    Windows（Mac也是差不多，可参照）<br>•    Git<br>•    Node.js</p>\n<p><strong>安装Hexo</strong></p>\n<p>1、利用 npm 命令即可安装。在任意位置点击鼠标右键，选择Git Bash。</p>\n<p> <img src=\"http://img.blog.csdn.net/20161026182730919\" alt=\"jojo&#39;s blog\"></p>\n<p>2、输入命令：</p>\n<blockquote>\n<p>npm install -g hexo</p>\n<p>注意：-g是指全局安装hexo。</p>\n</blockquote>\n<p><strong>创建Hexo文件夹</strong></p>\n<p>1、新建文件夹 Hexo<br>2、</p>\n<blockquote>\n<p>cd Hexo</p>\n<p>hexo init   //Hexo 即会自动在目标文件夹建立网站所需要的所有文件。</p>\n<p>npm install   //安装依赖包</p>\n</blockquote>\n<p><strong>本地查看</strong><br>•    现在我们已经搭建起本地的hexo博客了，执行以下命令(在Hexo文件夹下)，然后到浏览器输入localhost:4000看看。</p>\n<blockquote>\n<p>hexo generate</p>\n<p>hexo server</p>\n</blockquote>\n<p> <img src=\"http://img.blog.csdn.net/20161026183033027\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>注册Github账号</strong><br>•    这里不演示了。</p>\n<p><strong>创建Repository仓库</strong></p>\n<p>登录github后，</p>\n<p><img src=\"http://img.blog.csdn.net/20161027093752469\" alt=\"jojo&#39;s blog\"></p>\n<p><img src=\"http://img.blog.csdn.net/20161027093814641\" alt=\"jojo&#39;s blog\"></p>\n<p><img src=\"http://img.blog.csdn.net/20161027093832188\" alt=\"jojo&#39;s blog\"></p>\n<p>•    注意：创建的时候注意Repository的名字。比如我的Github账号是jasmine-na，那么我应该创建的Repository的名字是：<strong>jasmine-na.github.io</strong>。<br>(必须是Github账号名.github.io)</p>\n<p><img src=\"http://img.blog.csdn.net/20161027093143442\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>修改配置文件</strong><br>1、到你刚刚创建的Repository下，找到以下内容：</p>\n<p> <img src=\"http://img.blog.csdn.net/20161026183141935\" alt=\"jojo&#39;s blog\"></p>\n<p>2、先点击HTTPS，然后复制里面的地址。然后编辑_config.yml文件（在C:\\Hexo下）。<br> <img src=\"http://img.blog.csdn.net/20161026183201545\" alt=\"jojo&#39;s blog\"></p>\n<p>3、修改文件里面的deploy。其中的repository就改成你刚刚复制的地址。保存这个文件。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/jasmine-na/jasmine-na.github.io.git</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161027094431301\" alt=\"jojo&#39;s blog\"></p>\n<p>（注意格式）</p>\n<p><strong>完成部署</strong></p>\n<p>1、下载hexo-deployer-git</p>\n<blockquote>\n<p>npm install hexo-deployer-git –save</p>\n</blockquote>\n<p>2、最后一步，Git Bash下，依次键入以下指令：<br>（注意：每次修改本地文件后，都需要依次键入以下指令）</p>\n<blockquote>\n<p>hexo clean    //清除缓存文件 db.json 和已生成的静态文件 public </p>\n<p>hexo generate //生成网站静态文件到默认设置的 public 文件夹</p>\n<p>hexo deploy //自动生成网站静态文件，并部署到设定的仓库。</p>\n</blockquote>\n<p>hexo deploy过程中会提示你输入账号名和密码，Username是你的Github账号名称，而不是邮箱；Password就是你的Github的密码。</p>\n<p> <img src=\"http://img.blog.csdn.net/20161026184053081\" alt=\"jojo&#39;s blog\"></p>\n<p>2、OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的用户名）：<br><a href=\"http://jasmine-na.github.io/\" target=\"_blank\" rel=\"external\">http://jasmine-na.github.io/</a></p>\n<p><img src=\"http://img.blog.csdn.net/20161027101348580\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>Tips</strong><br>•    hexo现在支持更加简单的命令格式了，比如：</p>\n<blockquote>\n<p>hexo g == hexo generate</p>\n<p>hexo d == hexo deploy</p>\n<p>hexo s == hexo server</p>\n<p>hexo n == hexo new</p>\n</blockquote>\n<p><strong>更多文章：</strong><br><a href=\"http://blog.csdn.net/weixin_36401046/article/details/52937108\" target=\"_blank\" rel=\"external\">hexo+github（windows版+ssh版），搭建Hexo博客并部署到Github</a></p>\n","excerpt":"","more":"<p><img src=\"http://img.blog.csdn.net/20161026182636997\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>工具/原料</strong><br>•    Windows（Mac也是差不多，可参照）<br>•    Git<br>•    Node.js</p>\n<p><strong>安装Hexo</strong></p>\n<p>1、利用 npm 命令即可安装。在任意位置点击鼠标右键，选择Git Bash。</p>\n<p> <img src=\"http://img.blog.csdn.net/20161026182730919\" alt=\"jojo&#39;s blog\"></p>\n<p>2、输入命令：</p>\n<blockquote>\n<p>npm install -g hexo</p>\n<p>注意：-g是指全局安装hexo。</p>\n</blockquote>\n<p><strong>创建Hexo文件夹</strong></p>\n<p>1、新建文件夹 Hexo<br>2、</p>\n<blockquote>\n<p>cd Hexo</p>\n<p>hexo init   //Hexo 即会自动在目标文件夹建立网站所需要的所有文件。</p>\n<p>npm install   //安装依赖包</p>\n</blockquote>\n<p><strong>本地查看</strong><br>•    现在我们已经搭建起本地的hexo博客了，执行以下命令(在Hexo文件夹下)，然后到浏览器输入localhost:4000看看。</p>\n<blockquote>\n<p>hexo generate</p>\n<p>hexo server</p>\n</blockquote>\n<p> <img src=\"http://img.blog.csdn.net/20161026183033027\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>注册Github账号</strong><br>•    这里不演示了。</p>\n<p><strong>创建Repository仓库</strong></p>\n<p>登录github后，</p>\n<p><img src=\"http://img.blog.csdn.net/20161027093752469\" alt=\"jojo&#39;s blog\"></p>\n<p><img src=\"http://img.blog.csdn.net/20161027093814641\" alt=\"jojo&#39;s blog\"></p>\n<p><img src=\"http://img.blog.csdn.net/20161027093832188\" alt=\"jojo&#39;s blog\"></p>\n<p>•    注意：创建的时候注意Repository的名字。比如我的Github账号是jasmine-na，那么我应该创建的Repository的名字是：<strong>jasmine-na.github.io</strong>。<br>(必须是Github账号名.github.io)</p>\n<p><img src=\"http://img.blog.csdn.net/20161027093143442\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>修改配置文件</strong><br>1、到你刚刚创建的Repository下，找到以下内容：</p>\n<p> <img src=\"http://img.blog.csdn.net/20161026183141935\" alt=\"jojo&#39;s blog\"></p>\n<p>2、先点击HTTPS，然后复制里面的地址。然后编辑_config.yml文件（在C:\\Hexo下）。<br> <img src=\"http://img.blog.csdn.net/20161026183201545\" alt=\"jojo&#39;s blog\"></p>\n<p>3、修改文件里面的deploy。其中的repository就改成你刚刚复制的地址。保存这个文件。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/jasmine-na/jasmine-na.github.io.git</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161027094431301\" alt=\"jojo&#39;s blog\"></p>\n<p>（注意格式）</p>\n<p><strong>完成部署</strong></p>\n<p>1、下载hexo-deployer-git</p>\n<blockquote>\n<p>npm install hexo-deployer-git –save</p>\n</blockquote>\n<p>2、最后一步，Git Bash下，依次键入以下指令：<br>（注意：每次修改本地文件后，都需要依次键入以下指令）</p>\n<blockquote>\n<p>hexo clean    //清除缓存文件 db.json 和已生成的静态文件 public </p>\n<p>hexo generate //生成网站静态文件到默认设置的 public 文件夹</p>\n<p>hexo deploy //自动生成网站静态文件，并部署到设定的仓库。</p>\n</blockquote>\n<p>hexo deploy过程中会提示你输入账号名和密码，Username是你的Github账号名称，而不是邮箱；Password就是你的Github的密码。</p>\n<p> <img src=\"http://img.blog.csdn.net/20161026184053081\" alt=\"jojo&#39;s blog\"></p>\n<p>2、OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的用户名）：<br><a href=\"http://jasmine-na.github.io/\">http://jasmine-na.github.io/</a></p>\n<p><img src=\"http://img.blog.csdn.net/20161027101348580\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>Tips</strong><br>•    hexo现在支持更加简单的命令格式了，比如：</p>\n<blockquote>\n<p>hexo g == hexo generate</p>\n<p>hexo d == hexo deploy</p>\n<p>hexo s == hexo server</p>\n<p>hexo n == hexo new</p>\n</blockquote>\n<p><strong>更多文章：</strong><br><a href=\"http://blog.csdn.net/weixin_36401046/article/details/52937108\">hexo+github（windows版+ssh版），搭建Hexo博客并部署到Github</a></p>\n"},{"title":"hexo+github（windows版+ssh版），搭建Hexo博客并部署到Github","date":"2016-10-27T05:59:18.000Z","_content":"ssh优点：http部署时每次要输入github用户名密码，ssh不需要。\n**首先走完http版**：http://blog.csdn.net/weixin_36401046/article/details/52942683\n\n**设置SSH keys**\n\n1、在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。\nls -al ~/.ssh\n\n2、如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件：\n ![jojo's blog](http://img.blog.csdn.net/20161026183423330)\n\n3、生成密钥：(与接下来的3二选一即可)\n>git config --global user.email \"429359876@qq.com\"  # 填写你github注册并且验证的邮箱\n\n>git config --global user.name \"jasmine-na\"  # github 用户名\n\n>ssh-keygen #  会出现下面的内容，一直按Enter键就行\n\n>Generating public/private rsa key pair.\nEnter file in which to save the key (/home/logan/.ssh/id_rsa): \n/home/logan/.ssh/id_rsa already exists.\nOverwrite (y/n)?  #因为我已经生成过了所以提示我，你就一直按就行 \n\n>最后在你的.ssh 目录下面生成 id_rsa(私钥) id_rsa.pub(公钥)俩个文件\n\n>第二行会提示你在哪个目录下面生成文件。\n\n3、生成密钥另外一种方法：\n输入以下指令（邮箱就是你注册Github时候的邮箱）后，回车：\n>ssh-keygen -t rsa -C \"429359876@qq.com\"\n\n ![jojo's blog](http://img.blog.csdn.net/20161026183438862)\n\n然后它会提示要你输入passphrase，直接回车：\n\n ![jojo's blog](http://img.blog.csdn.net/20161026183459454)\n\n然后键入以下指令：\n>ssh-agent -s\n\n ![jojo's blog](http://img.blog.csdn.net/20161026183549938)\n\n继续输入指令：\n>ssh-add ~/.ssh/id_rsa\n\n输入之后，出错：\n ![jojo's blog](http://img.blog.csdn.net/20161026183614204)\n\n出错，则输入：\n>eval `ssh-agent -s`\n>ssh-add\n\n ![jojo's blog](http://img.blog.csdn.net/20161026183638360)\n\n\n4、打开.ssh/id_rsa.pub，全选复制Key\n ![jojo's blog](http://img.blog.csdn.net/20161026183841596)\n\n5、到Github\n![jojo's blog](http://img.blog.csdn.net/20161027110146361)\n\n![jojo's blog](http://img.blog.csdn.net/20161027110158205)\n\n![jojo's blog](http://img.blog.csdn.net/20161027110206799)\n\n6、测试：\n>ssh -T git@github.com\n\n ![jojo's blog](http://img.blog.csdn.net/20161026183947385)\n\n遇到警告输入“yes”，\n最后输出 You've successfully authenticated 表示添加key 成功。\n\n**编辑_config.yml文件**\n\n修改文件里面的deploy，\n\n修改后\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:jasmine-na/jasmine-na.github.io.git\n  branch: master\n```\n \n\n**完成部署**\n1、\t依次键入指令：\n\n>hexo clean\n\n>hexo generate\n\n>hexo deploy\n\n2、在浏览器输入：http://jasmine-na.github.io/\n\n ![jojo's blog](http://img.blog.csdn.net/20161027101348580)\n\n\n**更多文章：** \n[hexo+github（windows版+http版），搭建Hexo博客并部署到Github](http://blog.csdn.net/weixin_36401046/article/details/52942683)\n ","source":"_posts/hexo+github（windows版+ssh版），搭建Hexo博客并部署到Github.md","raw":"---\ntitle: hexo+github（windows版+ssh版），搭建Hexo博客并部署到Github\ndate: 2016-10-27 13:59:18\ntags:\n---\nssh优点：http部署时每次要输入github用户名密码，ssh不需要。\n**首先走完http版**：http://blog.csdn.net/weixin_36401046/article/details/52942683\n\n**设置SSH keys**\n\n1、在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。\nls -al ~/.ssh\n\n2、如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件：\n ![jojo's blog](http://img.blog.csdn.net/20161026183423330)\n\n3、生成密钥：(与接下来的3二选一即可)\n>git config --global user.email \"429359876@qq.com\"  # 填写你github注册并且验证的邮箱\n\n>git config --global user.name \"jasmine-na\"  # github 用户名\n\n>ssh-keygen #  会出现下面的内容，一直按Enter键就行\n\n>Generating public/private rsa key pair.\nEnter file in which to save the key (/home/logan/.ssh/id_rsa): \n/home/logan/.ssh/id_rsa already exists.\nOverwrite (y/n)?  #因为我已经生成过了所以提示我，你就一直按就行 \n\n>最后在你的.ssh 目录下面生成 id_rsa(私钥) id_rsa.pub(公钥)俩个文件\n\n>第二行会提示你在哪个目录下面生成文件。\n\n3、生成密钥另外一种方法：\n输入以下指令（邮箱就是你注册Github时候的邮箱）后，回车：\n>ssh-keygen -t rsa -C \"429359876@qq.com\"\n\n ![jojo's blog](http://img.blog.csdn.net/20161026183438862)\n\n然后它会提示要你输入passphrase，直接回车：\n\n ![jojo's blog](http://img.blog.csdn.net/20161026183459454)\n\n然后键入以下指令：\n>ssh-agent -s\n\n ![jojo's blog](http://img.blog.csdn.net/20161026183549938)\n\n继续输入指令：\n>ssh-add ~/.ssh/id_rsa\n\n输入之后，出错：\n ![jojo's blog](http://img.blog.csdn.net/20161026183614204)\n\n出错，则输入：\n>eval `ssh-agent -s`\n>ssh-add\n\n ![jojo's blog](http://img.blog.csdn.net/20161026183638360)\n\n\n4、打开.ssh/id_rsa.pub，全选复制Key\n ![jojo's blog](http://img.blog.csdn.net/20161026183841596)\n\n5、到Github\n![jojo's blog](http://img.blog.csdn.net/20161027110146361)\n\n![jojo's blog](http://img.blog.csdn.net/20161027110158205)\n\n![jojo's blog](http://img.blog.csdn.net/20161027110206799)\n\n6、测试：\n>ssh -T git@github.com\n\n ![jojo's blog](http://img.blog.csdn.net/20161026183947385)\n\n遇到警告输入“yes”，\n最后输出 You've successfully authenticated 表示添加key 成功。\n\n**编辑_config.yml文件**\n\n修改文件里面的deploy，\n\n修改后\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:jasmine-na/jasmine-na.github.io.git\n  branch: master\n```\n \n\n**完成部署**\n1、\t依次键入指令：\n\n>hexo clean\n\n>hexo generate\n\n>hexo deploy\n\n2、在浏览器输入：http://jasmine-na.github.io/\n\n ![jojo's blog](http://img.blog.csdn.net/20161027101348580)\n\n\n**更多文章：** \n[hexo+github（windows版+http版），搭建Hexo博客并部署到Github](http://blog.csdn.net/weixin_36401046/article/details/52942683)\n ","slug":"hexo+github（windows版+ssh版），搭建Hexo博客并部署到Github","published":1,"updated":"2016-10-27T06:52:42.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciut34buv0006b8g27cswj8vd","content":"<p>ssh优点：http部署时每次要输入github用户名密码，ssh不需要。<br><strong>首先走完http版</strong>：<a href=\"http://blog.csdn.net/weixin_36401046/article/details/52942683\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/weixin_36401046/article/details/52942683</a></p>\n<p><strong>设置SSH keys</strong></p>\n<p>1、在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。<br>ls -al ~/.ssh</p>\n<p>2、如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件：<br> <img src=\"http://img.blog.csdn.net/20161026183423330\" alt=\"jojo&#39;s blog\"></p>\n<p>3、生成密钥：(与接下来的3二选一即可)</p>\n<blockquote>\n<p>git config –global user.email “429359876@qq.com”  # 填写你github注册并且验证的邮箱</p>\n<p>git config –global user.name “jasmine-na”  # github 用户名</p>\n<p>ssh-keygen #  会出现下面的内容，一直按Enter键就行</p>\n<p>Generating public/private rsa key pair.<br>Enter file in which to save the key (/home/logan/.ssh/id_rsa):<br>/home/logan/.ssh/id_rsa already exists.<br>Overwrite (y/n)?  #因为我已经生成过了所以提示我，你就一直按就行 </p>\n<p>最后在你的.ssh 目录下面生成 id_rsa(私钥) id_rsa.pub(公钥)俩个文件</p>\n<p>第二行会提示你在哪个目录下面生成文件。</p>\n</blockquote>\n<p>3、生成密钥另外一种方法：<br>输入以下指令（邮箱就是你注册Github时候的邮箱）后，回车：</p>\n<blockquote>\n<p>ssh-keygen -t rsa -C “429359876@qq.com”</p>\n</blockquote>\n<p> <img src=\"http://img.blog.csdn.net/20161026183438862\" alt=\"jojo&#39;s blog\"></p>\n<p>然后它会提示要你输入passphrase，直接回车：</p>\n<p> <img src=\"http://img.blog.csdn.net/20161026183459454\" alt=\"jojo&#39;s blog\"></p>\n<p>然后键入以下指令：</p>\n<blockquote>\n<p>ssh-agent -s</p>\n</blockquote>\n<p> <img src=\"http://img.blog.csdn.net/20161026183549938\" alt=\"jojo&#39;s blog\"></p>\n<p>继续输入指令：</p>\n<blockquote>\n<p>ssh-add ~/.ssh/id_rsa</p>\n</blockquote>\n<p>输入之后，出错：<br> <img src=\"http://img.blog.csdn.net/20161026183614204\" alt=\"jojo&#39;s blog\"></p>\n<p>出错，则输入：</p>\n<blockquote>\n<p>eval <code>ssh-agent -s</code><br>ssh-add</p>\n</blockquote>\n<p> <img src=\"http://img.blog.csdn.net/20161026183638360\" alt=\"jojo&#39;s blog\"></p>\n<p>4、打开.ssh/id_rsa.pub，全选复制Key<br> <img src=\"http://img.blog.csdn.net/20161026183841596\" alt=\"jojo&#39;s blog\"></p>\n<p>5、到Github<br><img src=\"http://img.blog.csdn.net/20161027110146361\" alt=\"jojo&#39;s blog\"></p>\n<p><img src=\"http://img.blog.csdn.net/20161027110158205\" alt=\"jojo&#39;s blog\"></p>\n<p><img src=\"http://img.blog.csdn.net/20161027110206799\" alt=\"jojo&#39;s blog\"></p>\n<p>6、测试：</p>\n<blockquote>\n<p>ssh -T git@github.com</p>\n</blockquote>\n<p> <img src=\"http://img.blog.csdn.net/20161026183947385\" alt=\"jojo&#39;s blog\"></p>\n<p>遇到警告输入“yes”，<br>最后输出 You’ve successfully authenticated 表示添加key 成功。</p>\n<p><strong>编辑_config.yml文件</strong></p>\n<p>修改文件里面的deploy，</p>\n<p>修改后</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:jasmine-na/jasmine-na.github.io.git</div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure>\n<p><strong>完成部署</strong><br>1、    依次键入指令：</p>\n<blockquote>\n<p>hexo clean</p>\n<p>hexo generate</p>\n<p>hexo deploy</p>\n</blockquote>\n<p>2、在浏览器输入：<a href=\"http://jasmine-na.github.io/\" target=\"_blank\" rel=\"external\">http://jasmine-na.github.io/</a></p>\n<p> <img src=\"http://img.blog.csdn.net/20161027101348580\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>更多文章：</strong><br><a href=\"http://blog.csdn.net/weixin_36401046/article/details/52942683\" target=\"_blank\" rel=\"external\">hexo+github（windows版+http版），搭建Hexo博客并部署到Github</a></p>\n","excerpt":"","more":"<p>ssh优点：http部署时每次要输入github用户名密码，ssh不需要。<br><strong>首先走完http版</strong>：<a href=\"http://blog.csdn.net/weixin_36401046/article/details/52942683\">http://blog.csdn.net/weixin_36401046/article/details/52942683</a></p>\n<p><strong>设置SSH keys</strong></p>\n<p>1、在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。<br>ls -al ~/.ssh</p>\n<p>2、如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件：<br> <img src=\"http://img.blog.csdn.net/20161026183423330\" alt=\"jojo&#39;s blog\"></p>\n<p>3、生成密钥：(与接下来的3二选一即可)</p>\n<blockquote>\n<p>git config –global user.email “429359876@qq.com”  # 填写你github注册并且验证的邮箱</p>\n<p>git config –global user.name “jasmine-na”  # github 用户名</p>\n<p>ssh-keygen #  会出现下面的内容，一直按Enter键就行</p>\n<p>Generating public/private rsa key pair.<br>Enter file in which to save the key (/home/logan/.ssh/id_rsa):<br>/home/logan/.ssh/id_rsa already exists.<br>Overwrite (y/n)?  #因为我已经生成过了所以提示我，你就一直按就行 </p>\n<p>最后在你的.ssh 目录下面生成 id_rsa(私钥) id_rsa.pub(公钥)俩个文件</p>\n<p>第二行会提示你在哪个目录下面生成文件。</p>\n</blockquote>\n<p>3、生成密钥另外一种方法：<br>输入以下指令（邮箱就是你注册Github时候的邮箱）后，回车：</p>\n<blockquote>\n<p>ssh-keygen -t rsa -C “429359876@qq.com”</p>\n</blockquote>\n<p> <img src=\"http://img.blog.csdn.net/20161026183438862\" alt=\"jojo&#39;s blog\"></p>\n<p>然后它会提示要你输入passphrase，直接回车：</p>\n<p> <img src=\"http://img.blog.csdn.net/20161026183459454\" alt=\"jojo&#39;s blog\"></p>\n<p>然后键入以下指令：</p>\n<blockquote>\n<p>ssh-agent -s</p>\n</blockquote>\n<p> <img src=\"http://img.blog.csdn.net/20161026183549938\" alt=\"jojo&#39;s blog\"></p>\n<p>继续输入指令：</p>\n<blockquote>\n<p>ssh-add ~/.ssh/id_rsa</p>\n</blockquote>\n<p>输入之后，出错：<br> <img src=\"http://img.blog.csdn.net/20161026183614204\" alt=\"jojo&#39;s blog\"></p>\n<p>出错，则输入：</p>\n<blockquote>\n<p>eval <code>ssh-agent -s</code><br>ssh-add</p>\n</blockquote>\n<p> <img src=\"http://img.blog.csdn.net/20161026183638360\" alt=\"jojo&#39;s blog\"></p>\n<p>4、打开.ssh/id_rsa.pub，全选复制Key<br> <img src=\"http://img.blog.csdn.net/20161026183841596\" alt=\"jojo&#39;s blog\"></p>\n<p>5、到Github<br><img src=\"http://img.blog.csdn.net/20161027110146361\" alt=\"jojo&#39;s blog\"></p>\n<p><img src=\"http://img.blog.csdn.net/20161027110158205\" alt=\"jojo&#39;s blog\"></p>\n<p><img src=\"http://img.blog.csdn.net/20161027110206799\" alt=\"jojo&#39;s blog\"></p>\n<p>6、测试：</p>\n<blockquote>\n<p>ssh -T git@github.com</p>\n</blockquote>\n<p> <img src=\"http://img.blog.csdn.net/20161026183947385\" alt=\"jojo&#39;s blog\"></p>\n<p>遇到警告输入“yes”，<br>最后输出 You’ve successfully authenticated 表示添加key 成功。</p>\n<p><strong>编辑_config.yml文件</strong></p>\n<p>修改文件里面的deploy，</p>\n<p>修改后</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:jasmine-na/jasmine-na.github.io.git</div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure>\n<p><strong>完成部署</strong><br>1、    依次键入指令：</p>\n<blockquote>\n<p>hexo clean</p>\n<p>hexo generate</p>\n<p>hexo deploy</p>\n</blockquote>\n<p>2、在浏览器输入：<a href=\"http://jasmine-na.github.io/\">http://jasmine-na.github.io/</a></p>\n<p> <img src=\"http://img.blog.csdn.net/20161027101348580\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>更多文章：</strong><br><a href=\"http://blog.csdn.net/weixin_36401046/article/details/52942683\">hexo+github（windows版+http版），搭建Hexo博客并部署到Github</a></p>\n"},{"title":"如何在Mac OS X中开启或关闭显示隐藏文件命令","date":"2016-10-27T05:54:18.000Z","_content":"![jojo's blog](http://img.blog.csdn.net/20161027012623070)\n\n在.git同级目录下新建.gitignore文件，将要忽略的文件写进去即可。\n\n忽略前后：\n\n![jojo's blog](http://img.blog.csdn.net/20161027013007980)","source":"_posts/mac下git需忽略的文件处理办法（mac）.md","raw":"---\ntitle: 如何在Mac OS X中开启或关闭显示隐藏文件命令\ndate: 2016-10-27 13:54:18\ntags:\n---\n![jojo's blog](http://img.blog.csdn.net/20161027012623070)\n\n在.git同级目录下新建.gitignore文件，将要忽略的文件写进去即可。\n\n忽略前后：\n\n![jojo's blog](http://img.blog.csdn.net/20161027013007980)","slug":"mac下git需忽略的文件处理办法（mac）","published":1,"updated":"2016-10-27T06:52:47.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciut34buy0007b8g2n0wa41c0","content":"<p><img src=\"http://img.blog.csdn.net/20161027012623070\" alt=\"jojo&#39;s blog\"></p>\n<p>在.git同级目录下新建.gitignore文件，将要忽略的文件写进去即可。</p>\n<p>忽略前后：</p>\n<p><img src=\"http://img.blog.csdn.net/20161027013007980\" alt=\"jojo&#39;s blog\"></p>\n","excerpt":"","more":"<p><img src=\"http://img.blog.csdn.net/20161027012623070\" alt=\"jojo&#39;s blog\"></p>\n<p>在.git同级目录下新建.gitignore文件，将要忽略的文件写进去即可。</p>\n<p>忽略前后：</p>\n<p><img src=\"http://img.blog.csdn.net/20161027013007980\" alt=\"jojo&#39;s blog\"></p>\n"},{"title":"npm执行命令后无任何响应（windows下）","date":"2016-10-27T05:54:18.000Z","_content":"曾经执行过npm config set prefix 命令，\n导致npm的config乱掉了，\n找到这个文件.npmrc，\n然后删掉就可以了 。\n我的.npmrc位置在C:\\Users\\Administrator下。\n","source":"_posts/npm执行命令后无任何响应（windows下）.md","raw":"---\ntitle: npm执行命令后无任何响应（windows下）\ndate: 2016-10-27 13:54:18\ntags:\n---\n曾经执行过npm config set prefix 命令，\n导致npm的config乱掉了，\n找到这个文件.npmrc，\n然后删掉就可以了 。\n我的.npmrc位置在C:\\Users\\Administrator下。\n","slug":"npm执行命令后无任何响应（windows下）","published":1,"updated":"2016-10-27T06:55:09.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciut34bv90008b8g28bqv74kh","content":"<p>曾经执行过npm config set prefix 命令，<br>导致npm的config乱掉了，<br>找到这个文件.npmrc，<br>然后删掉就可以了 。<br>我的.npmrc位置在C:\\Users\\Administrator下。</p>\n","excerpt":"","more":"<p>曾经执行过npm config set prefix 命令，<br>导致npm的config乱掉了，<br>找到这个文件.npmrc，<br>然后删掉就可以了 。<br>我的.npmrc位置在C:\\Users\\Administrator下。</p>\n"},{"title":"osx系统git下载地址","date":"2016-10-27T05:54:18.000Z","_content":"osx系统git下载地址：\nhttps://sourceforge.net/projects/git-osx-installer/files/?source=navbar","source":"_posts/osx系统git下载地址.md","raw":"---\ntitle: osx系统git下载地址\ndate: 2016-10-27 13:54:18\ntags:\n---\nosx系统git下载地址：\nhttps://sourceforge.net/projects/git-osx-installer/files/?source=navbar","slug":"osx系统git下载地址","published":1,"updated":"2016-10-27T06:54:48.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciut34bvd0009b8g2cnoophew","content":"<p>osx系统git下载地址：<br><a href=\"https://sourceforge.net/projects/git-osx-installer/files/?source=navbar\" target=\"_blank\" rel=\"external\">https://sourceforge.net/projects/git-osx-installer/files/?source=navbar</a></p>\n","excerpt":"","more":"<p>osx系统git下载地址：<br><a href=\"https://sourceforge.net/projects/git-osx-installer/files/?source=navbar\">https://sourceforge.net/projects/git-osx-installer/files/?source=navbar</a></p>\n"},{"title":"ssh是否连接成功","date":"2016-10-27T05:54:18.000Z","_content":">ssh -T git@github.com\n\n 输出 You've successfully authenticated 表示添加key 成功，","source":"_posts/ssh是否连接成功.md","raw":"---\ntitle: ssh是否连接成功\ndate: 2016-10-27 13:54:18\ntags:\n---\n>ssh -T git@github.com\n\n 输出 You've successfully authenticated 表示添加key 成功，","slug":"ssh是否连接成功","published":1,"updated":"2016-10-27T06:54:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciut34bvm000ab8g2kafldx53","content":"<blockquote>\n<p>ssh -T git@github.com</p>\n</blockquote>\n<p> 输出 You’ve successfully authenticated 表示添加key 成功，</p>\n","excerpt":"","more":"<blockquote>\n<p>ssh -T git@github.com</p>\n</blockquote>\n<p> 输出 You’ve successfully authenticated 表示添加key 成功，</p>\n"},{"title":"web开发时自动刷新网页：liveReload安装，sublime 3","date":"2016-10-27T05:54:18.000Z","_content":"需要插件\nsublime text3：View in Browser；LiveReload\n\nchrome：liveReload\n\n \n配置方法\n\n**一：sublime text3**\n\nsublime 3下载地址：\n\nhttp://download.csdn.net/download/reggergdsg/9541966\n\n\n**1、在sublime text3安装插件 view in browser**\n\n注意（安装插件之前先安装Package Control：\nhttp://blog.csdn.net/weixin_36401046/article/details/52880000，\nhttp://devework.com/sublime-text-3-package-control.html）\n\n```\nctrl+shift+p\n```\n\n```\n输入install package回车\n```\n ![jojo's blog](http://img.blog.csdn.net/20161021123610219)\n \n```\nview in browser\n```\n\n**2、安装成功后，修改默认的浏览器：**\n\n\n```\npreferences->package setting->view in browser->setting default\n```\n\n把firefox改为chrome64\n\n![jojo's blog](http://img.blog.csdn.net/20161020221608579)\n\n**3、在sublime text3安装插件liveReload**\n\n```\nctrl+shift+p\n```\n\n```\n输入install package回车\n```\n\n\n```\nliveReload\n```\n![jojo's blog](http://img.blog.csdn.net/20161021140437368)\n\n\n**4、liveReload配置**\n\n```\npreferences -> Packge Settings -> LiveReload -> Settings - Default\n```\n\n\n ![jojo's blog](http://img.blog.csdn.net/20161021103511910)\n \n\n输入以下内容保存即可\n\n```\n{\n    \"enabled_plugins\": [\n        \"SimpleReloadPlugin\",\n        \"SimpleRefresh\"\n    ]\n}\n```\n\n**二、 chrome浏览器安装liveReload插件**\n\n**1、**\n```\n方法一：进入chrome插件中心，搜索liveReload，安装即可。\n```\n\n\n\n![jojo's blog](http://img.blog.csdn.net/20161020221630579)\n\n```\n方法二：如果进不到插件中心，下载安装包安装到chrome浏览器：\n```\n\n http://download.csdn.net/download/weixin_36401046/9659158\n\n\n**2、**进入chrome扩展程序页面，将livereload中的允许访问文件网址打上勾 \n\n![jojo's blog](http://img.blog.csdn.net/20161021103722429)\n\n\n**三、测试**\n重新打开sublime text3，重新启动chrome。\n在sublime text3编辑一个测试html文件，\n\n```\n<html>\n<meta charset=\"UTF-8\">\n<body>\n<h1>开心</h1>\n<p>自动刷新</p>\n</body>\n</html>\n```\n\n按 ctr+alt+v 在chrome浏览器中运行，编辑器下方出现livereload提示，并且点击chrome浏览器的livereload图标中间小圆点由虚变实，说明配置成功。\n\n\n![jojo's blog](http://img.blog.csdn.net/20161020221647486)\n\n **重点内容**：只需要在sublime text3里编辑代码，按 ctr+s 保存，即可在chrome里面看到实时更新。\n \n![jojo's blog](http://img.blog.csdn.net/20161021110719643)\n          \n\n**如果没有成功自动刷新，把以下走一遍：**\n\n1、找到packages文件夹\n\n![jojo's blog](http://img.blog.csdn.net/20161021105053386)\n\n ![jojo's blog](http://img.blog.csdn.net/20161021105404410)\n \n2、从https://github.com/Grafikart/ST3-LiveReload 下载压缩包到本地\n \n3、解压， 重命名为LiveReload，拷贝到packages中\n\n参考文献：http://blog.csdn.net/neet007/article/details/51694643","source":"_posts/web开发时自动刷新网页：liveReload安装，sublime 3.md","raw":"---\ntitle: web开发时自动刷新网页：liveReload安装，sublime 3\ndate: 2016-10-27 13:54:18\ntags:\n---\n需要插件\nsublime text3：View in Browser；LiveReload\n\nchrome：liveReload\n\n \n配置方法\n\n**一：sublime text3**\n\nsublime 3下载地址：\n\nhttp://download.csdn.net/download/reggergdsg/9541966\n\n\n**1、在sublime text3安装插件 view in browser**\n\n注意（安装插件之前先安装Package Control：\nhttp://blog.csdn.net/weixin_36401046/article/details/52880000，\nhttp://devework.com/sublime-text-3-package-control.html）\n\n```\nctrl+shift+p\n```\n\n```\n输入install package回车\n```\n ![jojo's blog](http://img.blog.csdn.net/20161021123610219)\n \n```\nview in browser\n```\n\n**2、安装成功后，修改默认的浏览器：**\n\n\n```\npreferences->package setting->view in browser->setting default\n```\n\n把firefox改为chrome64\n\n![jojo's blog](http://img.blog.csdn.net/20161020221608579)\n\n**3、在sublime text3安装插件liveReload**\n\n```\nctrl+shift+p\n```\n\n```\n输入install package回车\n```\n\n\n```\nliveReload\n```\n![jojo's blog](http://img.blog.csdn.net/20161021140437368)\n\n\n**4、liveReload配置**\n\n```\npreferences -> Packge Settings -> LiveReload -> Settings - Default\n```\n\n\n ![jojo's blog](http://img.blog.csdn.net/20161021103511910)\n \n\n输入以下内容保存即可\n\n```\n{\n    \"enabled_plugins\": [\n        \"SimpleReloadPlugin\",\n        \"SimpleRefresh\"\n    ]\n}\n```\n\n**二、 chrome浏览器安装liveReload插件**\n\n**1、**\n```\n方法一：进入chrome插件中心，搜索liveReload，安装即可。\n```\n\n\n\n![jojo's blog](http://img.blog.csdn.net/20161020221630579)\n\n```\n方法二：如果进不到插件中心，下载安装包安装到chrome浏览器：\n```\n\n http://download.csdn.net/download/weixin_36401046/9659158\n\n\n**2、**进入chrome扩展程序页面，将livereload中的允许访问文件网址打上勾 \n\n![jojo's blog](http://img.blog.csdn.net/20161021103722429)\n\n\n**三、测试**\n重新打开sublime text3，重新启动chrome。\n在sublime text3编辑一个测试html文件，\n\n```\n<html>\n<meta charset=\"UTF-8\">\n<body>\n<h1>开心</h1>\n<p>自动刷新</p>\n</body>\n</html>\n```\n\n按 ctr+alt+v 在chrome浏览器中运行，编辑器下方出现livereload提示，并且点击chrome浏览器的livereload图标中间小圆点由虚变实，说明配置成功。\n\n\n![jojo's blog](http://img.blog.csdn.net/20161020221647486)\n\n **重点内容**：只需要在sublime text3里编辑代码，按 ctr+s 保存，即可在chrome里面看到实时更新。\n \n![jojo's blog](http://img.blog.csdn.net/20161021110719643)\n          \n\n**如果没有成功自动刷新，把以下走一遍：**\n\n1、找到packages文件夹\n\n![jojo's blog](http://img.blog.csdn.net/20161021105053386)\n\n ![jojo's blog](http://img.blog.csdn.net/20161021105404410)\n \n2、从https://github.com/Grafikart/ST3-LiveReload 下载压缩包到本地\n \n3、解压， 重命名为LiveReload，拷贝到packages中\n\n参考文献：http://blog.csdn.net/neet007/article/details/51694643","slug":"web开发时自动刷新网页：liveReload安装，sublime 3","published":1,"updated":"2016-10-27T06:54:18.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciut34bwc000bb8g2se6vu2xl","content":"<p>需要插件<br>sublime text3：View in Browser；LiveReload</p>\n<p>chrome：liveReload</p>\n<p>配置方法</p>\n<p><strong>一：sublime text3</strong></p>\n<p>sublime 3下载地址：</p>\n<p><a href=\"http://download.csdn.net/download/reggergdsg/9541966\" target=\"_blank\" rel=\"external\">http://download.csdn.net/download/reggergdsg/9541966</a></p>\n<p><strong>1、在sublime text3安装插件 view in browser</strong></p>\n<p>注意（安装插件之前先安装Package Control：<br><a href=\"http://blog.csdn.net/weixin_36401046/article/details/52880000，\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/weixin_36401046/article/details/52880000，</a><br><a href=\"http://devework.com/sublime-text-3-package-control.html）\" target=\"_blank\" rel=\"external\">http://devework.com/sublime-text-3-package-control.html）</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctrl+<span class=\"built_in\">shift</span>+p</div></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入<span class=\"keyword\">install</span> <span class=\"keyword\">package</span>回车</div></pre></td></tr></table></figure>\n<p> <img src=\"http://img.blog.csdn.net/20161021123610219\" alt=\"jojo&#39;s blog\"></p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">view</span> <span class=\"keyword\">in</span> browser</div></pre></td></tr></table></figure>\n<p><strong>2、安装成功后，修改默认的浏览器：</strong></p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">preferences</span>-&gt;</span><span class=\"function\"><span class=\"title\">package</span> setting-&gt;</span><span class=\"function\"><span class=\"title\">view</span> <span class=\"built_in\">in</span> browser-&gt;</span>setting default</div></pre></td></tr></table></figure>\n<p>把firefox改为chrome64</p>\n<p><img src=\"http://img.blog.csdn.net/20161020221608579\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>3、在sublime text3安装插件liveReload</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctrl+<span class=\"built_in\">shift</span>+p</div></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入<span class=\"keyword\">install</span> <span class=\"keyword\">package</span>回车</div></pre></td></tr></table></figure>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">liveReload</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161021140437368\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>4、liveReload配置</strong></p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">preferences</span> -&gt;</span> P<span class=\"function\"><span class=\"title\">ackge</span> Settings -&gt;</span> L<span class=\"function\"><span class=\"title\">iveReload</span> -&gt;</span> Settings - Default</div></pre></td></tr></table></figure>\n<p> <img src=\"http://img.blog.csdn.net/20161021103511910\" alt=\"jojo&#39;s blog\"></p>\n<p>输入以下内容保存即可</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"enabled_plugins\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"SimpleReloadPlugin\"</span>,</div><div class=\"line\">        <span class=\"string\">\"SimpleRefresh\"</span></div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>二、 chrome浏览器安装liveReload插件</strong></p>\n<p><strong>1、</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">方法一：进入chrome插件中心，搜索liveReload，安装即可。</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20161020221630579\" alt=\"jojo&#39;s blog\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">方法二：如果进不到插件中心，下载安装包安装到chrome浏览器：</div></pre></td></tr></table></figure>\n<p> <a href=\"http://download.csdn.net/download/weixin_36401046/9659158\" target=\"_blank\" rel=\"external\">http://download.csdn.net/download/weixin_36401046/9659158</a></p>\n<p><strong>2、</strong>进入chrome扩展程序页面，将livereload中的允许访问文件网址打上勾 </p>\n<p><img src=\"http://img.blog.csdn.net/20161021103722429\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>三、测试</strong><br>重新打开sublime text3，重新启动chrome。<br>在sublime text3编辑一个测试html文件，</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>开心<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>自动刷新<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>按 ctr+alt+v 在chrome浏览器中运行，编辑器下方出现livereload提示，并且点击chrome浏览器的livereload图标中间小圆点由虚变实，说明配置成功。</p>\n<p><img src=\"http://img.blog.csdn.net/20161020221647486\" alt=\"jojo&#39;s blog\"></p>\n<p> <strong>重点内容</strong>：只需要在sublime text3里编辑代码，按 ctr+s 保存，即可在chrome里面看到实时更新。</p>\n<p><img src=\"http://img.blog.csdn.net/20161021110719643\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>如果没有成功自动刷新，把以下走一遍：</strong></p>\n<p>1、找到packages文件夹</p>\n<p><img src=\"http://img.blog.csdn.net/20161021105053386\" alt=\"jojo&#39;s blog\"></p>\n<p> <img src=\"http://img.blog.csdn.net/20161021105404410\" alt=\"jojo&#39;s blog\"></p>\n<p>2、从<a href=\"https://github.com/Grafikart/ST3-LiveReload\" target=\"_blank\" rel=\"external\">https://github.com/Grafikart/ST3-LiveReload</a> 下载压缩包到本地</p>\n<p>3、解压， 重命名为LiveReload，拷贝到packages中</p>\n<p>参考文献：<a href=\"http://blog.csdn.net/neet007/article/details/51694643\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/neet007/article/details/51694643</a></p>\n","excerpt":"","more":"<p>需要插件<br>sublime text3：View in Browser；LiveReload</p>\n<p>chrome：liveReload</p>\n<p>配置方法</p>\n<p><strong>一：sublime text3</strong></p>\n<p>sublime 3下载地址：</p>\n<p><a href=\"http://download.csdn.net/download/reggergdsg/9541966\">http://download.csdn.net/download/reggergdsg/9541966</a></p>\n<p><strong>1、在sublime text3安装插件 view in browser</strong></p>\n<p>注意（安装插件之前先安装Package Control：<br><a href=\"http://blog.csdn.net/weixin_36401046/article/details/52880000，\">http://blog.csdn.net/weixin_36401046/article/details/52880000，</a><br><a href=\"http://devework.com/sublime-text-3-package-control.html）\">http://devework.com/sublime-text-3-package-control.html）</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctrl+<span class=\"built_in\">shift</span>+p</div></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入<span class=\"keyword\">install</span> <span class=\"keyword\">package</span>回车</div></pre></td></tr></table></figure>\n<p> <img src=\"http://img.blog.csdn.net/20161021123610219\" alt=\"jojo&#39;s blog\"></p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">view</span> <span class=\"keyword\">in</span> browser</div></pre></td></tr></table></figure>\n<p><strong>2、安装成功后，修改默认的浏览器：</strong></p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">preferences</span>-&gt;</span><span class=\"function\"><span class=\"title\">package</span> setting-&gt;</span><span class=\"function\"><span class=\"title\">view</span> <span class=\"built_in\">in</span> browser-&gt;</span>setting default</div></pre></td></tr></table></figure>\n<p>把firefox改为chrome64</p>\n<p><img src=\"http://img.blog.csdn.net/20161020221608579\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>3、在sublime text3安装插件liveReload</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctrl+<span class=\"built_in\">shift</span>+p</div></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入<span class=\"keyword\">install</span> <span class=\"keyword\">package</span>回车</div></pre></td></tr></table></figure>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">liveReload</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161021140437368\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>4、liveReload配置</strong></p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">preferences</span> -&gt;</span> P<span class=\"function\"><span class=\"title\">ackge</span> Settings -&gt;</span> L<span class=\"function\"><span class=\"title\">iveReload</span> -&gt;</span> Settings - Default</div></pre></td></tr></table></figure>\n<p> <img src=\"http://img.blog.csdn.net/20161021103511910\" alt=\"jojo&#39;s blog\"></p>\n<p>输入以下内容保存即可</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"enabled_plugins\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"SimpleReloadPlugin\"</span>,</div><div class=\"line\">        <span class=\"string\">\"SimpleRefresh\"</span></div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>二、 chrome浏览器安装liveReload插件</strong></p>\n<p><strong>1、</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">方法一：进入chrome插件中心，搜索liveReload，安装即可。</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20161020221630579\" alt=\"jojo&#39;s blog\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">方法二：如果进不到插件中心，下载安装包安装到chrome浏览器：</div></pre></td></tr></table></figure>\n<p> <a href=\"http://download.csdn.net/download/weixin_36401046/9659158\">http://download.csdn.net/download/weixin_36401046/9659158</a></p>\n<p><strong>2、</strong>进入chrome扩展程序页面，将livereload中的允许访问文件网址打上勾 </p>\n<p><img src=\"http://img.blog.csdn.net/20161021103722429\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>三、测试</strong><br>重新打开sublime text3，重新启动chrome。<br>在sublime text3编辑一个测试html文件，</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>开心<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>自动刷新<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>按 ctr+alt+v 在chrome浏览器中运行，编辑器下方出现livereload提示，并且点击chrome浏览器的livereload图标中间小圆点由虚变实，说明配置成功。</p>\n<p><img src=\"http://img.blog.csdn.net/20161020221647486\" alt=\"jojo&#39;s blog\"></p>\n<p> <strong>重点内容</strong>：只需要在sublime text3里编辑代码，按 ctr+s 保存，即可在chrome里面看到实时更新。</p>\n<p><img src=\"http://img.blog.csdn.net/20161021110719643\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>如果没有成功自动刷新，把以下走一遍：</strong></p>\n<p>1、找到packages文件夹</p>\n<p><img src=\"http://img.blog.csdn.net/20161021105053386\" alt=\"jojo&#39;s blog\"></p>\n<p> <img src=\"http://img.blog.csdn.net/20161021105404410\" alt=\"jojo&#39;s blog\"></p>\n<p>2、从<a href=\"https://github.com/Grafikart/ST3-LiveReload\">https://github.com/Grafikart/ST3-LiveReload</a> 下载压缩包到本地</p>\n<p>3、解压， 重命名为LiveReload，拷贝到packages中</p>\n<p>参考文献：<a href=\"http://blog.csdn.net/neet007/article/details/51694643\">http://blog.csdn.net/neet007/article/details/51694643</a></p>\n"},{"title":"win系统下nodejs安装及环境配置","date":"2016-10-27T05:54:18.000Z","_content":"**1.下载安装文件：**\n\n下载nodejs，官网：[http://nodejs.org/download/](http://nodejs.org/download/)，我这里下载的是node-v0.10.28-x86.msi，如下图：\n\n![jojo's blog](http://img.blog.csdn.net/20161020101436118)\n\n**2.安装nodejs：**\n\n下载完成之后，双击\"node-v0.10.28-x86.msi\"，安装nodejs。\n\n**3.环境变量配置，**便于在任意位置执行node应用：\n\n**（1）找到node.exe所在的目录复制**，开始 —> 所有程序 —> nodejs —> 右键Node.js —>单击属性\n\n![jojo's blog](http://img.blog.csdn.net/20161020104311195)\n\n![jojo's blog](http://img.blog.csdn.net/20161020102428452)\n\n**（2）加入系统环境变量PATH中**：\n\n开始 —>  右键计算机 —>单击属性\n\n![jojo's blog](http://img.blog.csdn.net/20161020102934126)\n\n打开高级系统属性\n\n![jojo's blog](http://img.blog.csdn.net/20161020103601863)\n\n打开环境变量\n\n![jojo's blog](http://img.blog.csdn.net/20161020103352096)\n\n编辑 —> 将 `C:\\Program Files\\nodejs` 添加到用户变量的PATH中\n\n![jojo's blog](http://img.blog.csdn.net/20161020104807651)\n\n（注意，path之间是使用英文分号；分隔的）\n\n确定，ok了。\n\n","source":"_posts/win系统下nodejs安装及环境配置.md","raw":"---\ntitle: win系统下nodejs安装及环境配置\ndate: 2016-10-27 13:54:18\ntags:\n---\n**1.下载安装文件：**\n\n下载nodejs，官网：[http://nodejs.org/download/](http://nodejs.org/download/)，我这里下载的是node-v0.10.28-x86.msi，如下图：\n\n![jojo's blog](http://img.blog.csdn.net/20161020101436118)\n\n**2.安装nodejs：**\n\n下载完成之后，双击\"node-v0.10.28-x86.msi\"，安装nodejs。\n\n**3.环境变量配置，**便于在任意位置执行node应用：\n\n**（1）找到node.exe所在的目录复制**，开始 —> 所有程序 —> nodejs —> 右键Node.js —>单击属性\n\n![jojo's blog](http://img.blog.csdn.net/20161020104311195)\n\n![jojo's blog](http://img.blog.csdn.net/20161020102428452)\n\n**（2）加入系统环境变量PATH中**：\n\n开始 —>  右键计算机 —>单击属性\n\n![jojo's blog](http://img.blog.csdn.net/20161020102934126)\n\n打开高级系统属性\n\n![jojo's blog](http://img.blog.csdn.net/20161020103601863)\n\n打开环境变量\n\n![jojo's blog](http://img.blog.csdn.net/20161020103352096)\n\n编辑 —> 将 `C:\\Program Files\\nodejs` 添加到用户变量的PATH中\n\n![jojo's blog](http://img.blog.csdn.net/20161020104807651)\n\n（注意，path之间是使用英文分号；分隔的）\n\n确定，ok了。\n\n","slug":"win系统下nodejs安装及环境配置","published":1,"updated":"2016-10-27T06:54:00.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciut34bwg000cb8g2z73muwfx","content":"<p><strong>1.下载安装文件：</strong></p>\n<p>下载nodejs，官网：<a href=\"http://nodejs.org/download/\" target=\"_blank\" rel=\"external\">http://nodejs.org/download/</a>，我这里下载的是node-v0.10.28-x86.msi，如下图：</p>\n<p><img src=\"http://img.blog.csdn.net/20161020101436118\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>2.安装nodejs：</strong></p>\n<p>下载完成之后，双击”node-v0.10.28-x86.msi”，安装nodejs。</p>\n<p><strong>3.环境变量配置，</strong>便于在任意位置执行node应用：</p>\n<p><strong>（1）找到node.exe所在的目录复制</strong>，开始 —&gt; 所有程序 —&gt; nodejs —&gt; 右键Node.js —&gt;单击属性</p>\n<p><img src=\"http://img.blog.csdn.net/20161020104311195\" alt=\"jojo&#39;s blog\"></p>\n<p><img src=\"http://img.blog.csdn.net/20161020102428452\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>（2）加入系统环境变量PATH中</strong>：</p>\n<p>开始 —&gt;  右键计算机 —&gt;单击属性</p>\n<p><img src=\"http://img.blog.csdn.net/20161020102934126\" alt=\"jojo&#39;s blog\"></p>\n<p>打开高级系统属性</p>\n<p><img src=\"http://img.blog.csdn.net/20161020103601863\" alt=\"jojo&#39;s blog\"></p>\n<p>打开环境变量</p>\n<p><img src=\"http://img.blog.csdn.net/20161020103352096\" alt=\"jojo&#39;s blog\"></p>\n<p>编辑 —&gt; 将 <code>C:\\Program Files\\nodejs</code> 添加到用户变量的PATH中</p>\n<p><img src=\"http://img.blog.csdn.net/20161020104807651\" alt=\"jojo&#39;s blog\"></p>\n<p>（注意，path之间是使用英文分号；分隔的）</p>\n<p>确定，ok了。</p>\n","excerpt":"","more":"<p><strong>1.下载安装文件：</strong></p>\n<p>下载nodejs，官网：<a href=\"http://nodejs.org/download/\">http://nodejs.org/download/</a>，我这里下载的是node-v0.10.28-x86.msi，如下图：</p>\n<p><img src=\"http://img.blog.csdn.net/20161020101436118\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>2.安装nodejs：</strong></p>\n<p>下载完成之后，双击”node-v0.10.28-x86.msi”，安装nodejs。</p>\n<p><strong>3.环境变量配置，</strong>便于在任意位置执行node应用：</p>\n<p><strong>（1）找到node.exe所在的目录复制</strong>，开始 —&gt; 所有程序 —&gt; nodejs —&gt; 右键Node.js —&gt;单击属性</p>\n<p><img src=\"http://img.blog.csdn.net/20161020104311195\" alt=\"jojo&#39;s blog\"></p>\n<p><img src=\"http://img.blog.csdn.net/20161020102428452\" alt=\"jojo&#39;s blog\"></p>\n<p><strong>（2）加入系统环境变量PATH中</strong>：</p>\n<p>开始 —&gt;  右键计算机 —&gt;单击属性</p>\n<p><img src=\"http://img.blog.csdn.net/20161020102934126\" alt=\"jojo&#39;s blog\"></p>\n<p>打开高级系统属性</p>\n<p><img src=\"http://img.blog.csdn.net/20161020103601863\" alt=\"jojo&#39;s blog\"></p>\n<p>打开环境变量</p>\n<p><img src=\"http://img.blog.csdn.net/20161020103352096\" alt=\"jojo&#39;s blog\"></p>\n<p>编辑 —&gt; 将 <code>C:\\Program Files\\nodejs</code> 添加到用户变量的PATH中</p>\n<p><img src=\"http://img.blog.csdn.net/20161020104807651\" alt=\"jojo&#39;s blog\"></p>\n<p>（注意，path之间是使用英文分号；分隔的）</p>\n<p>确定，ok了。</p>\n"},{"title":"问题2：有关使用 Hexo 和 GitHub 搭建博客，出现 hexo -d 报错如何解决？（windows下）","date":"2016-10-27T05:54:18.000Z","_content":"\n```\nbash: /dev/tty: No such device or address\nerror: failed to execute prompt script (exit code 1)\nfatal: could not read Username for 'https://github.com': Invalid argument\nFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/do\ncs/troubleshooting.html\nError: bash: /dev/tty: No such device or address\nerror: failed to execute prompt script (exit code 1)\nfatal: could not read Username for 'https://github.com': Invalid argument\n\n    at ChildProcess.<anonymous> (E:\\git\\node_modules\\hexo-util\\lib\\spawn.js:37:1\n7)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at ChildProcess.cp.emit (E:\\git\\node_modules\\cross-spawn\\lib\\enoent.js:40:29\n)\n    at maybeClose (internal/child_process.js:850:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)\nFATAL bash: /dev/tty: No such device or address\nerror: failed to execute prompt script (exit code 1)\nfatal: could not read Username for 'https://github.com': Invalid argument\n\nError: bash: /dev/tty: No such device or address\nerror: failed to execute prompt script (exit code 1)\nfatal: could not read Username for 'https://github.com': Invalid argument\n\n    at ChildProcess.<anonymous> (E:\\git\\node_modules\\hexo-util\\lib\\spawn.js:37:1\n7)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at ChildProcess.cp.emit (E:\\git\\node_modules\\cross-spawn\\lib\\enoent.js:40:29\n)\n    at maybeClose (internal/child_process.js:850:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)\n```\n![jojo's blog](http://img.blog.csdn.net/20161026175323201)\n\n\n我的config.yml这样配置的\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/jasmine-na/jasmine-na.github.io.git\n  branch: master\n```\n\n原因：是在windows下的cmd.exe环境的缘故\n\n![jojo's blog](http://img.blog.csdn.net/20161026175411418)\n\n![jojo's blog](http://img.blog.csdn.net/20161026175421827)\n\n然后我把命令切换到Git Bash 环境中运行，有提示输入github的用户名和密码，输入 hexo -d 成功上传了。","source":"_posts/问题2：有关使用 Hexo 和 GitHub 搭建博客，出现 hexo -d 报错如何解决？（windows下）.md","raw":"---\ntitle: 问题2：有关使用 Hexo 和 GitHub 搭建博客，出现 hexo -d 报错如何解决？（windows下）\ndate: 2016-10-27 13:54:18\ntags:\n---\n\n```\nbash: /dev/tty: No such device or address\nerror: failed to execute prompt script (exit code 1)\nfatal: could not read Username for 'https://github.com': Invalid argument\nFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/do\ncs/troubleshooting.html\nError: bash: /dev/tty: No such device or address\nerror: failed to execute prompt script (exit code 1)\nfatal: could not read Username for 'https://github.com': Invalid argument\n\n    at ChildProcess.<anonymous> (E:\\git\\node_modules\\hexo-util\\lib\\spawn.js:37:1\n7)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at ChildProcess.cp.emit (E:\\git\\node_modules\\cross-spawn\\lib\\enoent.js:40:29\n)\n    at maybeClose (internal/child_process.js:850:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)\nFATAL bash: /dev/tty: No such device or address\nerror: failed to execute prompt script (exit code 1)\nfatal: could not read Username for 'https://github.com': Invalid argument\n\nError: bash: /dev/tty: No such device or address\nerror: failed to execute prompt script (exit code 1)\nfatal: could not read Username for 'https://github.com': Invalid argument\n\n    at ChildProcess.<anonymous> (E:\\git\\node_modules\\hexo-util\\lib\\spawn.js:37:1\n7)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at ChildProcess.cp.emit (E:\\git\\node_modules\\cross-spawn\\lib\\enoent.js:40:29\n)\n    at maybeClose (internal/child_process.js:850:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)\n```\n![jojo's blog](http://img.blog.csdn.net/20161026175323201)\n\n\n我的config.yml这样配置的\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/jasmine-na/jasmine-na.github.io.git\n  branch: master\n```\n\n原因：是在windows下的cmd.exe环境的缘故\n\n![jojo's blog](http://img.blog.csdn.net/20161026175411418)\n\n![jojo's blog](http://img.blog.csdn.net/20161026175421827)\n\n然后我把命令切换到Git Bash 环境中运行，有提示输入github的用户名和密码，输入 hexo -d 成功上传了。","slug":"问题2：有关使用 Hexo 和 GitHub 搭建博客，出现 hexo -d 报错如何解决？（windows下）","published":1,"updated":"2016-10-27T06:57:18.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciut34bwj000db8g2tr17du0m","content":"<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">bash: /dev/tty: No such device or address</div><div class=\"line\"><span class=\"keyword\">error: </span>failed to execute prompt script (exit code 1)</div><div class=\"line\">fatal: could not read Username for 'https://github.com': Invalid argument</div><div class=\"line\">FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/do</div><div class=\"line\">cs/troubleshooting.html</div><div class=\"line\"><span class=\"keyword\">Error: </span>bash: /dev/tty: No such device or address</div><div class=\"line\"><span class=\"keyword\">error: </span>failed to execute prompt script (exit code 1)</div><div class=\"line\">fatal: could not read Username for 'https://github.com': Invalid argument</div><div class=\"line\"></div><div class=\"line\">    at ChildProcess.&lt;anonymous&gt; (E:\\git\\node_modules\\hexo-util\\lib\\spawn.js:37:1</div><div class=\"line\">7)</div><div class=\"line\">    at emitTwo (events.js:106:13)</div><div class=\"line\">    at ChildProcess.emit (events.js:191:7)</div><div class=\"line\">    at ChildProcess.cp.emit (E:\\git\\node_modules\\cross-spawn\\lib\\enoent.js:40:29</div><div class=\"line\">)</div><div class=\"line\">    at maybeClose (internal/child_process.js:850:16)</div><div class=\"line\">    at Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)</div><div class=\"line\">FATAL bash: /dev/tty: No such device or address</div><div class=\"line\"><span class=\"keyword\">error: </span>failed to execute prompt script (exit code 1)</div><div class=\"line\">fatal: could not read Username for 'https://github.com': Invalid argument</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Error: </span>bash: /dev/tty: No such device or address</div><div class=\"line\"><span class=\"keyword\">error: </span>failed to execute prompt script (exit code 1)</div><div class=\"line\">fatal: could not read Username for 'https://github.com': Invalid argument</div><div class=\"line\"></div><div class=\"line\">    at ChildProcess.&lt;anonymous&gt; (E:\\git\\node_modules\\hexo-util\\lib\\spawn.js:37:1</div><div class=\"line\">7)</div><div class=\"line\">    at emitTwo (events.js:106:13)</div><div class=\"line\">    at ChildProcess.emit (events.js:191:7)</div><div class=\"line\">    at ChildProcess.cp.emit (E:\\git\\node_modules\\cross-spawn\\lib\\enoent.js:40:29</div><div class=\"line\">)</div><div class=\"line\">    at maybeClose (internal/child_process.js:850:16)</div><div class=\"line\">    at Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161026175323201\" alt=\"jojo&#39;s blog\"></p>\n<p>我的config.yml这样配置的</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/jasmine-na/jasmine-na.github.io.git</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure>\n<p>原因：是在windows下的cmd.exe环境的缘故</p>\n<p><img src=\"http://img.blog.csdn.net/20161026175411418\" alt=\"jojo&#39;s blog\"></p>\n<p><img src=\"http://img.blog.csdn.net/20161026175421827\" alt=\"jojo&#39;s blog\"></p>\n<p>然后我把命令切换到Git Bash 环境中运行，有提示输入github的用户名和密码，输入 hexo -d 成功上传了。</p>\n","excerpt":"","more":"<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">bash: /dev/tty: No such device or address</div><div class=\"line\"><span class=\"keyword\">error: </span>failed to execute prompt script (exit code 1)</div><div class=\"line\">fatal: could not read Username for 'https://github.com': Invalid argument</div><div class=\"line\">FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/do</div><div class=\"line\">cs/troubleshooting.html</div><div class=\"line\"><span class=\"keyword\">Error: </span>bash: /dev/tty: No such device or address</div><div class=\"line\"><span class=\"keyword\">error: </span>failed to execute prompt script (exit code 1)</div><div class=\"line\">fatal: could not read Username for 'https://github.com': Invalid argument</div><div class=\"line\"></div><div class=\"line\">    at ChildProcess.&lt;anonymous&gt; (E:\\git\\node_modules\\hexo-util\\lib\\spawn.js:37:1</div><div class=\"line\">7)</div><div class=\"line\">    at emitTwo (events.js:106:13)</div><div class=\"line\">    at ChildProcess.emit (events.js:191:7)</div><div class=\"line\">    at ChildProcess.cp.emit (E:\\git\\node_modules\\cross-spawn\\lib\\enoent.js:40:29</div><div class=\"line\">)</div><div class=\"line\">    at maybeClose (internal/child_process.js:850:16)</div><div class=\"line\">    at Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)</div><div class=\"line\">FATAL bash: /dev/tty: No such device or address</div><div class=\"line\"><span class=\"keyword\">error: </span>failed to execute prompt script (exit code 1)</div><div class=\"line\">fatal: could not read Username for 'https://github.com': Invalid argument</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Error: </span>bash: /dev/tty: No such device or address</div><div class=\"line\"><span class=\"keyword\">error: </span>failed to execute prompt script (exit code 1)</div><div class=\"line\">fatal: could not read Username for 'https://github.com': Invalid argument</div><div class=\"line\"></div><div class=\"line\">    at ChildProcess.&lt;anonymous&gt; (E:\\git\\node_modules\\hexo-util\\lib\\spawn.js:37:1</div><div class=\"line\">7)</div><div class=\"line\">    at emitTwo (events.js:106:13)</div><div class=\"line\">    at ChildProcess.emit (events.js:191:7)</div><div class=\"line\">    at ChildProcess.cp.emit (E:\\git\\node_modules\\cross-spawn\\lib\\enoent.js:40:29</div><div class=\"line\">)</div><div class=\"line\">    at maybeClose (internal/child_process.js:850:16)</div><div class=\"line\">    at Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161026175323201\" alt=\"jojo&#39;s blog\"></p>\n<p>我的config.yml这样配置的</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/jasmine-na/jasmine-na.github.io.git</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure>\n<p>原因：是在windows下的cmd.exe环境的缘故</p>\n<p><img src=\"http://img.blog.csdn.net/20161026175411418\" alt=\"jojo&#39;s blog\"></p>\n<p><img src=\"http://img.blog.csdn.net/20161026175421827\" alt=\"jojo&#39;s blog\"></p>\n<p>然后我把命令切换到Git Bash 环境中运行，有提示输入github的用户名和密码，输入 hexo -d 成功上传了。</p>\n"},{"title":"如何在Mac OS X中开启或关闭显示隐藏文件命令","date":"2016-10-27T05:54:18.000Z","_content":"\n打开终端，输入：\n>defaults write com.apple.finder AppleShowAllFiles -bool true \n\n此命令显示隐藏文件\n>defaults write com.apple.finder AppleShowAllFiles -bool false\n\n此命令关闭显示隐藏文件\n\n命令运行之后需要重新加载Finder：快捷键option+command+esc，选中Finder，重新启动即可","source":"_posts/如何在Mac OS X中开启或关闭显示隐藏文件命令.md","raw":"---\ntitle: 如何在Mac OS X中开启或关闭显示隐藏文件命令\ndate: 2016-10-27 13:54:18\ntags:\n---\n\n打开终端，输入：\n>defaults write com.apple.finder AppleShowAllFiles -bool true \n\n此命令显示隐藏文件\n>defaults write com.apple.finder AppleShowAllFiles -bool false\n\n此命令关闭显示隐藏文件\n\n命令运行之后需要重新加载Finder：快捷键option+command+esc，选中Finder，重新启动即可","slug":"如何在Mac OS X中开启或关闭显示隐藏文件命令","published":1,"updated":"2016-10-27T06:41:16.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciut34bwo000eb8g2ke5n6jw6","content":"<p>打开终端，输入：</p>\n<blockquote>\n<p>defaults write com.apple.finder AppleShowAllFiles -bool true </p>\n</blockquote>\n<p>此命令显示隐藏文件</p>\n<blockquote>\n<p>defaults write com.apple.finder AppleShowAllFiles -bool false</p>\n</blockquote>\n<p>此命令关闭显示隐藏文件</p>\n<p>命令运行之后需要重新加载Finder：快捷键option+command+esc，选中Finder，重新启动即可</p>\n","excerpt":"","more":"<p>打开终端，输入：</p>\n<blockquote>\n<p>defaults write com.apple.finder AppleShowAllFiles -bool true </p>\n</blockquote>\n<p>此命令显示隐藏文件</p>\n<blockquote>\n<p>defaults write com.apple.finder AppleShowAllFiles -bool false</p>\n</blockquote>\n<p>此命令关闭显示隐藏文件</p>\n<p>命令运行之后需要重新加载Finder：快捷键option+command+esc，选中Finder，重新启动即可</p>\n"},{"title":"问题1：有关使用 Hexo 和 GitHub 搭建博客，出现 hexo -d 报错如何解决？（windows下）","date":"2016-10-27T05:54:18.000Z","_content":"\n```\nINFO  Deploying: git\nINFO  Clearing .deploy_git folder...\nINFO  Copying files from public folder...\nwarning: LF will be replaced by CRLF in 2016/10/26/hello-world/index.html.\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in archives/2016/10/index.html.\nThe file will have its original line endings in your working directory.\n```\n\n![jojo's blog](http://img.blog.csdn.net/20161026173849741)\n\n这个问题是这样解决的\n第一删除你hexo 下面的.deploy_git文件夹\n第二 运行 \n![jojo's blog](http://img.blog.csdn.net/20161026173519752)\n第三 重新 hexo clean\nhexo g\nhexo d\n第四 打开自己的网址，进行验证是否成功\n![jojo's blog](http://img.blog.csdn.net/20161026173532085)\n\n","source":"_posts/问题1：有关使用 Hexo 和 GitHub 搭建博客，出现 hexo -d 报错如何解决？（windows下）.md","raw":"---\ntitle: 问题1：有关使用 Hexo 和 GitHub 搭建博客，出现 hexo -d 报错如何解决？（windows下）\ndate: 2016-10-27 13:54:18\ntags:\n---\n\n```\nINFO  Deploying: git\nINFO  Clearing .deploy_git folder...\nINFO  Copying files from public folder...\nwarning: LF will be replaced by CRLF in 2016/10/26/hello-world/index.html.\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in archives/2016/10/index.html.\nThe file will have its original line endings in your working directory.\n```\n\n![jojo's blog](http://img.blog.csdn.net/20161026173849741)\n\n这个问题是这样解决的\n第一删除你hexo 下面的.deploy_git文件夹\n第二 运行 \n![jojo's blog](http://img.blog.csdn.net/20161026173519752)\n第三 重新 hexo clean\nhexo g\nhexo d\n第四 打开自己的网址，进行验证是否成功\n![jojo's blog](http://img.blog.csdn.net/20161026173532085)\n\n","slug":"问题1：有关使用 Hexo 和 GitHub 搭建博客，出现 hexo -d 报错如何解决？（windows下）","published":1,"updated":"2016-10-27T06:57:28.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciut34bws000fb8g2j9ro36m7","content":"<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">INFO  Deploying: git</div><div class=\"line\">INFO  Clearing .deploy_git <span class=\"built_in\">folder</span>...</div><div class=\"line\">INFO  Copying <span class=\"built_in\">files</span> <span class=\"built_in\">from</span> public <span class=\"built_in\">folder</span>...</div><div class=\"line\">warning: LF will be replaced <span class=\"keyword\">by</span> <span class=\"literal\">CRLF</span> <span class=\"keyword\">in</span> <span class=\"number\">2016</span>/<span class=\"number\">10</span>/<span class=\"number\">26</span>/hello-world/index.html.</div><div class=\"line\">The <span class=\"built_in\">file</span> will have its original <span class=\"built_in\">line</span> endings <span class=\"keyword\">in</span> your working <span class=\"built_in\">directory</span>.</div><div class=\"line\">warning: LF will be replaced <span class=\"keyword\">by</span> <span class=\"literal\">CRLF</span> <span class=\"keyword\">in</span> archives/<span class=\"number\">2016</span>/<span class=\"number\">10</span>/index.html.</div><div class=\"line\">The <span class=\"built_in\">file</span> will have its original <span class=\"built_in\">line</span> endings <span class=\"keyword\">in</span> your working <span class=\"built_in\">directory</span>.</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161026173849741\" alt=\"jojo&#39;s blog\"></p>\n<p>这个问题是这样解决的<br>第一删除你hexo 下面的.deploy_git文件夹<br>第二 运行<br><img src=\"http://img.blog.csdn.net/20161026173519752\" alt=\"jojo&#39;s blog\"><br>第三 重新 hexo clean<br>hexo g<br>hexo d<br>第四 打开自己的网址，进行验证是否成功<br><img src=\"http://img.blog.csdn.net/20161026173532085\" alt=\"jojo&#39;s blog\"></p>\n","excerpt":"","more":"<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">INFO  Deploying: git</div><div class=\"line\">INFO  Clearing .deploy_git <span class=\"built_in\">folder</span>...</div><div class=\"line\">INFO  Copying <span class=\"built_in\">files</span> <span class=\"built_in\">from</span> public <span class=\"built_in\">folder</span>...</div><div class=\"line\">warning: LF will be replaced <span class=\"keyword\">by</span> <span class=\"literal\">CRLF</span> <span class=\"keyword\">in</span> <span class=\"number\">2016</span>/<span class=\"number\">10</span>/<span class=\"number\">26</span>/hello-world/index.html.</div><div class=\"line\">The <span class=\"built_in\">file</span> will have its original <span class=\"built_in\">line</span> endings <span class=\"keyword\">in</span> your working <span class=\"built_in\">directory</span>.</div><div class=\"line\">warning: LF will be replaced <span class=\"keyword\">by</span> <span class=\"literal\">CRLF</span> <span class=\"keyword\">in</span> archives/<span class=\"number\">2016</span>/<span class=\"number\">10</span>/index.html.</div><div class=\"line\">The <span class=\"built_in\">file</span> will have its original <span class=\"built_in\">line</span> endings <span class=\"keyword\">in</span> your working <span class=\"built_in\">directory</span>.</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161026173849741\" alt=\"jojo&#39;s blog\"></p>\n<p>这个问题是这样解决的<br>第一删除你hexo 下面的.deploy_git文件夹<br>第二 运行<br><img src=\"http://img.blog.csdn.net/20161026173519752\" alt=\"jojo&#39;s blog\"><br>第三 重新 hexo clean<br>hexo g<br>hexo d<br>第四 打开自己的网址，进行验证是否成功<br><img src=\"http://img.blog.csdn.net/20161026173532085\" alt=\"jojo&#39;s blog\"></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}